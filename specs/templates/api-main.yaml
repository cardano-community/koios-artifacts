openapi: 3.1.0
#!info!#
servers:
  - url: https://api.koios.rest/api/v1
    description: Mainnet
  - url: https://guild.koios.rest/api/v1
    description: Guildnet
  - url: https://preview.koios.rest/api/v1
    description: Preview Network
  - url: https://preprod.koios.rest/api/v1
    description: Preprod Network
  - url: https://sancho.koios.rest/api/v1
    description: Sanchonet Network
paths:

  /tip: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tip"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Query Chain Tip
      description: Get the tip info about the latest block seen by chain
      operationId: tip
  /genesis: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genesis"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Genesis info
      description: Get the Genesis parameters used to start specific era on chain
      operationId: genesis
  /totals: #RPC
    get:
      tags:
        - Network
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/totals"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get historical tokenomic stats
      description: >-
        Get the circulating utxo, treasury, rewards, supply and reserves in
        lovelace for specified epoch, all epochs if empty
      operationId: totals
  /param_updates: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/param_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Param Update Proposals
      description: Get all parameter update proposals submitted to the chain starting Shelley era
      operationId: param_updates
  /cli_protocol_params: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cli_protocol_params"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: CLI Protocol Parameters
      description: >-
        Get Current Protocol Parameters as published by cardano-cli. Note that
        the output schema of this command is unfortunately fluid on cardano-node
        and may vary between CLI versions/era. Accordingly, the returned output for
        this endpoint is left as raw JSON (single row) and any filtering to output should
        be done on client-side
      operationId: cli_protocol_params
  /reserve_withdrawals: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reserve_withdrawals"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Reserve Withdrawals
      description: List of all withdrawals from reserves against stake accounts
      operationId: reserve_withdrawals
  /treasury_withdrawals: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reserve_withdrawals"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Treasury Withdrawals
      description: List of all withdrawals from treasury against stake accounts
      operationId: treasury_withdrawals

  /epoch_info: #RPC
    get:
      tags:
        - Epoch
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
        - $ref: "#/components/parameters/_include_next_epoch"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Epoch Information
      description: Get the epoch information, all epochs if no epoch specified
      operationId: epoch_info
  /epoch_params: #RPC
    get:
      tags:
        - Epoch
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_params"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Epoch's Protocol Parameters
      description: >-
        Get the protocol parameters for specific epoch, returns information
        about all epochs if no epoch specified
      operationId: epoch_params
  /epoch_block_protocols: #RPC
    get:
      tags:
        - Epoch
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_block_protocols"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Epoch's Block Protocols
      description: >-
        Get the information about block protocol distribution in epoch
      operationId: epoch_block_protocols

  /blocks: #RPC
    get:
      tags:
        - Block
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blocks"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block List
      description: Get summarised details about all blocks (paginated - latest first)
      operationId: blocks
  /block_info: #RPC
    post:
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_hashes"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Information
      description: Get detailed information about a specific block
      operationId: block_info
  /block_txs: #RPC
    post:
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_hashes"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Transactions
      description: Get a list of all transactions included in provided blocks
      operationId: block_txs
  /block_tx_cbor: #RPC
    post:
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_hashes"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_tx_cbor"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Transactions (Raw CBOR)
      description: Get raw CBOR data for all transaction(s) within requested blocks
      operationId: block_tx_cbor
  /block_tx_info: #RPC
    post:
      deprecated: true
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_tx_info"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_tx_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Transactions (Detailed Info)
      description: Get detailed information about transaction(s) for requested blocks
      operationId: block_tx_info
      x-badges:
        - color: red
          label: 'Deprecated'

  /utxo_info: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/utxo_refs_with_extended"
      responses:
        "200":
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: UTxO Info
      description: Get UTxO set for requested UTxO references
      operationId: utxo_info
  /tx_cbor: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_cbor"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Raw Transaction (CBOR)
      description: Get raw transaction(s) in CBOR format
      operationId: tx_cbor
  /tx_info: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_info"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Information
      description: Get detailed information about transaction(s)
      operationId: tx_info
  /tx_metadata: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_metadata"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Metadata
      description: Get metadata information (if any) for given transaction(s)
      operationId: tx_metadata
  /tx_metalabels: #RPC
    get:
      tags:
        - Transactions
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_metalabels"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Metadata Labels
      description: Get a list of all transaction metalabels
      operationId: tx_metalabels
  /submittx: #submit-api
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/txbin"
      x-code-samples:
        - lang: "Shell"
          source: |
            # Assuming ${data} is a raw binary serialized transaction on the file-system.
            # If using a CLI-generated tx file, please ensure to deserialise (using `xxd -p -r <<< $(jq .cborHex ${tx.signed}) > ${data}`) first before submitting.
            curl -X POST \
                --header "Content-Type: application/cbor" \
                --data-binary @${data} https://api.koios.rest/api/v1/submittx
      responses:
        "202":
          description: OK
          content:
            application/json:
              schema:
                description: The transaction id.
                type: string
                format: hex
                minLength: 64
                maxLength: 64
              example: 92bcd06b25dfbd89b578d536b4d3b7dd269b7c2aa206ed518012cffe0444d67f
        "400":
          description: An error occured while submitting transaction.
      summary: Submit Transaction
      description: Submit an already serialized transaction to the network.
      operationId: submittx
  /tx_status: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_status"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Status
      description: Get the number of block confirmations for a given transaction hash list
      operationId: tx_status
  /tx_utxos: #RPC
    post:
      tags:
        - Transactions
      deprecated: true
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_utxos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction UTxOs
      description: Get UTxO set (inputs/outputs) of transactions [DEPRECATED - Use /utxo_info instead].
      operationId: tx_utxos
      x-badges:
        - color: red
          label: 'Deprecated'

  /address_info: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/payment_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Information
      description: Get address info - balance, associated stake address (if any) and UTxO set for given addresses
      operationId: address_info
  /address_utxos: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/payment_addresses_with_extended"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address UTXOs
      description: Get UTxO set for given addresses
      operationId: address_utxos
  /address_outputs: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/address_txs"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_outputs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Outputs
      description: Basic transaction output info for given addresses
      operationId: address_outputs
  /credential_utxos: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/credential_utxos"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: UTxOs from payment credentials
      description: Get UTxO details for requested payment credentials
      operationId: credential_utxos
  /address_txs: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/address_txs"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Transactions
      description: Get the transaction hash list of input address array, optionally filtering after specified block height (inclusive)
      operationId: address_txs
  /credential_txs: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/credential_txs"
      responses:
        "200":
          description: Array of transaction hashes for given credential(s)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transactions from payment credentials
      description: Get the transaction hash list of input payment credential array, optionally filtering after specified block height (inclusive)
      operationId: credential_txs
  /address_assets: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/payment_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_assets"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Assets
      description: Get the list of all the assets (policy, name and quantity) for given addresses
      operationId: address_assets

  /account_list: #RPC
    get:
      tags:
        - Stake Account
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account List
      description: Get a list of all stake addresses that have atleast 1 transaction
      operationId: account_list
  /account_info: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Information
      description: Get the account information for given stake addresses
      operationId: account_info
  /account_info_cached: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Information (Cached)
      description: Get the cached account information for given stake addresses (effective for performance query against registered accounts)
      operationId: account_info_cached
  /account_utxos: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_extended"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: UTxOs for stake addresses (accounts)
      description: Get a list of all UTxOs for given stake addresses (account)s
      operationId: account_utxos
  /account_txs: #RPC
    get:
      tags:
        - Stake Account
      parameters:
        - $ref: "#/components/parameters/_stake_address"
        - $ref: "#/components/parameters/_after_block_height"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Txs
      description: Get a list of all Txs for a given stake address (account)
      operationId: account_txs
  /account_rewards: #RPC
    post:
      deprecated: true
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_rewards"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Rewards
      description: >-
        Get the full rewards history (including MIR) for given stake addresses
      operationId: account_rewards
      x-badges:
        - color: red
          label: 'Deprecated'
  /account_reward_history: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_reward_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Reward History
      description: >-
        Get the full rewards history (including MIR) for given stake addresses
      operationId: account_reward_history
  /account_updates: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Updates
      description: >-
        Get the account updates (registration, deregistration, delegation and
        withdrawals) for given stake addresses
      operationId: account_updates
  /account_update_history: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_update_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Update History
      description: >-
        Get the account updates (registration, deregistration, delegation and
        withdrawals) for given stake addresses
      operationId: account_update_history
  /account_addresses: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_first_only_and_empty"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Addresses
      description: Get all addresses associated with given staking accounts
      operationId: account_addresses
  /account_assets: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_assets"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Assets
      description: Get the native asset balance for a given stake address
      operationId: account_assets
  /account_history: #RPC
    post:
      deprecated: true
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account History
      description: Get the staking history of given stake addresses (accounts)
      operationId: account_history
      x-badges:
        - color: red
          label: 'Deprecated'
  /account_stake_history: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_stake_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Stake History
      description: Get the staking history of given stake addresses (accounts)
      operationId: account_stake_history

  /asset_list: #RPC
    get:
      tags:
        - Asset
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset List
      description: Get the list of all native assets (paginated)
      operationId: asset_list
  /policy_asset_list: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of brief information of assets under the same policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset List
      description: Get the list of asset under the given policy (including balances)
      operationId: policy_asset_list
  /asset_token_registry: #RPC
    get:
      tags:
        - Asset
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_token_registry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Token Registry
      description: Get a list of assets registered via token registry on github
      operationId: asset_token_registry
  /asset_info: #RPC
    post:
      tags:
        - Asset
      requestBody:
        $ref: "#/components/requestBodies/asset_list"
      responses:
        "200":
          description: Array of detailed asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Information (Bulk)
      description: Get the information of a list of assets including first minting & token registry metadata
      operationId: asset_info
  /asset_utxos: #RPC
    post:
      tags:
        - Asset
      requestBody:
        $ref: "#/components/requestBodies/asset_list_with_extended"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset UTXOs
      description: Get the UTXO information of a list of assets including
      operationId: asset_utxos
  /asset_history: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Array of asset mint/burn history
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset History
      description: Get the mint/burn history of an asset
      operationId: asset_history
  /asset_addresses: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Addresses
      description: Get the list of all addresses holding a given asset <br><br>
        `Note - Due to cardano's UTxO design and usage from projects, asset to addresses map can be infinite. Thus, for a small subset of active projects 
        with millions of transactions, these might end up with timeouts (HTTP code 504) on free layer. Such large-scale projects are free to subscribe to 
        query layers to have a dedicated cache table for themselves served via Koios.`
      operationId: asset_addresses
  /asset_nft_address: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy_nft"
        - $ref: "#/components/parameters/_asset_name_nft"
      responses:
        "200":
          description: Payment addresses currently holding the given NFT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_nft_address"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: NFT Address
      description: Get the address where specified NFT currently reside on.
      operationId: asset_nft_address
  /policy_asset_addresses: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of asset names and payment addresses for the given policy (including balances)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset Address List
      description: Get the list of addresses with quantity for each asset on the given policy <br><br>
        `Note - Due to cardano's UTxO design and usage from projects, asset to addresses map can be infinite. Thus, for a small subset of active projects 
        with millions of transactions, these might end up with timeouts (HTTP code 504) on free layer. Such large-scale projects are free to subscribe to 
        query layers to have a dedicated cache table for themselves served via Koios.`
      operationId: policy_asset_addresses
  /policy_asset_info: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of detailed information of assets under the same policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset Information
      description: Get the information for all assets under the same policy
      operationId: policy_asset_info
  /policy_asset_mints: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Get a list of mint or burn count details for all assets minted under a policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_mints"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset Mints
      description: Get a list of mint or burn count details for all assets minted under a policy
      operationId: policy_asset_mints
  /asset_summary: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Array of asset summary information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_summary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Summary
      description: Get the summary of an asset (total transactions exclude minting/total wallets include only wallets with asset balance)
      operationId: asset_summary
  /asset_txs: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
        - $ref: "#/components/parameters/_after_block_height"
        - $ref: "#/components/parameters/_history"
      responses:
        "200":
          description: An array of Tx hashes that included the given asset (latest first)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Transactions
      description: Get the list of current or all asset transaction hashes (newest first)
      operationId: asset_txs

  /drep_epoch_summary: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_epoch_summary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Epoch Summary
      description: Summary of voting power and DRep count for each epoch
      operationId: drep_epoch_summary
  /drep_list: #RPC
    get:
      tags:
        - Governance
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps List
      description: List of all active delegated representatives (DReps)
      operationId: drep_list
  /drep_info: #RPC
    post:
      tags:
        - Governance
      requestBody:
        $ref: "#/components/requestBodies/drep_id_bulk"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Info
      description: Get detailed information about requested delegated representatives (DReps)
      operationId: drep_info
  /drep_metadata: #RPC
    post:
      tags:
        - Governance
      requestBody:
        $ref: "#/components/requestBodies/drep_id_bulk"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_metadata"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Metadata
      description: List metadata for requested delegated representatives (DReps)
      operationId: drep_metadata
  /drep_updates: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_drep_id_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Updates
      description: List of updates for requested (or all) delegated representatives (DReps)
      operationId: drep_updates
  /drep_history: #RPC
    get:
      deprecated: true
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
        - $ref: "#/components/parameters/_drep_id_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_voting_power_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Voting Power History
      description: History of DReps voting power against each (or requested) epoch
      operationId: drep_history
      x-badges:
        - color: red
          label: 'Deprecated'
  /drep_voting_power_history: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
        - $ref: "#/components/parameters/_drep_id_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_voting_power_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Voting Power History
      description: History of DReps voting power against each (or requested) epoch
      operationId: drep_voting_power_history
  /drep_votes: #RPC
    get:
      deprecated: true
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_drep_id"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_votes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Votes
      description: List of all votes casted by requested delegated representative (DRep)
      operationId: drep_votes
      x-badges:
        - color: red
          label: 'Deprecated'
  /drep_delegators: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_drep_id"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drep_delegators"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: DReps Delegators
      description: List of all delegators to requested delegated representative (DRep).
      operationId: drep_delegators
  /committee_info: #RPC
    get:
      tags:
        - Governance
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/committee_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Committee Information
      description: Information about active committee and its members
      operationId: committee_info
  /committee_votes: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_cc_hot_id"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/committee_votes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Committee Votes
      description: List of all votes casted by given committee member or collective
      operationId: committee_votes
  /proposal_list: #RPC
    get:
      tags:
        - Governance
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposal_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Proposals List
      description: List of all governance proposals
      operationId: proposal_list
  /voter_proposal_list: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_voter_id"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposal_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Voter's Proposal List
      description: List of all governance proposals for specified DRep, SPO or Committee credential
      operationId: voter_proposal_list
  /proposal_voting_summary: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_proposal_id"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposal_voting_summary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Proposal Voting Summary
      description: Summary of votes for given proposal
      operationId: proposal_voting_summary
  /proposal_votes: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_proposal_id"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposal_votes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Proposal Votes
      description: List of all votes cast on specified governance action
      operationId: proposal_votes
  /vote_list: #RPC
    get:
      tags:
        - Governance      
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vote_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Vote List
      description: List of all votes posted on-chain
      operationId: vote_list

  /pool_list: #RPC
    get:
      tags:
        - Pool
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool List
      description: List of brief info for all pools
      operationId: pool_list
  /pool_info: #RPC
    post:
      tags:
        - Pool
      requestBody:
        $ref: "#/components/requestBodies/pool_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Information
      description: Current pool statuses and details for a specified list of pool ids
      operationId: pool_info
  /pool_stake_snapshot: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_snapshot"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Stake Snapshot
      description: Returns Mark, Set and Go stake snapshots for the selected pool, useful for leaderlog calculation
      operationId: pool_stake_snapshot
  /pool_delegators: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_delegators"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Delegators List
      description: Return information about live delegators for a given pool.
      operationId: pool_delegators
  /pool_delegators_history: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_delegators_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Delegators History
      description: Return information about active delegators (incl. history) for a given pool and epoch number (all epochs if not specified).
      operationId: pool_delegators_history
  /pool_blocks: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_blocks"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Blocks
      description: >-
        Return information about blocks minted by a given pool for all epochs
        (or _epoch_no if provided)
      operationId: pool_blocks
  /pool_owner_history: #RPC
    post:
      tags:
        - Pool
      requestBody:
        $ref: "#/components/requestBodies/pool_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_owner_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Owner History
      description: >-
        Return information about pool owner's historical stake and their promised pledge to their pools
      operationId: pool_owner_history
  /pool_history: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_history_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Stake, Block and Reward History
      description: >-
        Return information about pool stake, block and reward history in a given epoch _epoch_no
        (or all epochs that pool existed for, in descending order if no _epoch_no was provided)
      operationId: pool_history
  /pool_updates: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Updates (History)
      description: Return all pool updates for all pools or only updates for specific pool if specified
      operationId: pool_updates
  /pool_registrations: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_registrations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Registrations
      description: Return all pool registrations initiated in the requested epoch
      operationId: pool_registrations
  /pool_retirements: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_registrations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Retirements
      description: Return all pool retirements initiated in the requested epoch
      operationId: pool_retirements
  /pool_relays: #RPC
    get:
      tags:
        - Pool
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_relays"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Relays
      description: A list of registered relays for all pools
      operationId: pool_relays
  /pool_voting_power_history: #RPC
    get:
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
        - $ref: "#/components/parameters/_pool_bech32_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_voting_power_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool's Voting Power History
      description: History of Pool voting power against each (or requested) epoch
      operationId: pool_voting_power_history
  /pool_votes: #RPC
    get:
      deprecated: true
      tags:
        - Governance
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_votes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Votes
      description: List of all votes casted by a pool
      operationId: pool_votes
      x-badges:
        - color: red
          label: 'Deprecated'
  
  /pool_groups: #RPC
    get:
      tags:
        - Pool
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_groups"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Groups
      description: List of all registered pool and their groups across sources from [pool_groups](https://github.com/cardano-community/pool_groups) repository. This is only relevant for mainnet
      operationId: pool_groups
  /pool_metadata: #RPC
    post:
      tags:
        - Pool
      requestBody:
        $ref: "#/components/requestBodies/pool_ids_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_metadata"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Metadata
      description: Metadata (on & off-chain) for all pools
      operationId: pool_metadata
  /pool_calidus_keys: #RPC
    get:
      tags:
        - Pool
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_calidus_keys"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Calidus Keys
      description: List of valid calidus keys for all pools
      operationId: pool_calidus_keys

  /script_info: #RPC
    post:
      tags:
        - Script
      requestBody:
        $ref: "#/components/requestBodies/script_hashes"
      responses:
        "200":
          description: Array of information for scripts requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Script Information
      description: List of script information for given script hashes
      operationId: script_info
  /native_script_list: #RPC
    get:
      tags:
        - Script
      responses:
        "200":
          description: List of native script and creation tx hash pairs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Native Script List
      description: List of all existing native script hashes along with their creation transaction hashes
      operationId: native_script_list
  /plutus_script_list: #RPC
    get:
      tags:
        - Script
      responses:
        "200":
          description: List of Plutus script and creation tx hash pairs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Plutus Script List
      description: List of all existing Plutus script hashes along with their creation transaction hashes
      operationId: plutus_script_list
  /script_redeemers: #RPC
    get:
      tags:
        - Script
      parameters:
        - $ref: "#/components/parameters/_script_hash"
      responses:
        "200":
          description: Array of all redeemers for a given script hash
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_redeemers"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Script Redeemers
      description: List of all redeemers for a given script hash
      operationId: script_redeemers
  /script_utxos: #RPC
    get:
      tags:
        - Script
      parameters:
        - $ref: "#/components/parameters/_script_hash"
        - $ref: "#/components/parameters/_extended"
      responses:
        "200":
          description: List of UTXOs for a given script hash
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Script UTXOs
      description: List of all UTXOs for a given script hash
      operationId: script_utxos
  /datum_info: #RPC
    post:
      tags:
        - Script
      requestBody:
        $ref: "#/components/requestBodies/datum_hashes"
      responses:
        "200":
          description: Array of datum information for given datum hashes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/datum_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Datum Information
      description: List of datum information for given datum hashes
      operationId: datum_info

  /ogmios: #ogmios-api
    post:
      tags:
        - Ogmios
      requestBody:
        $ref: "#/components/requestBodies/ogmios"
      responses:
        "200":
          description: Current tip of the chain, identified by a slot and a block header hash.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ogmiostip"
        "400":
          $ref: "#/components/responses/BadRequest"
      summary: Query Example
      description: |
        Query the current tip of the Network.

        <br>
        <div style="background-color: #222; padding: 12px 0px 12px 12px;border-left: 5px solid  rgb(173, 44, 44);font-size: var(--font-size-regular);">
        We do support transparent forwarding for various methods from Ogmios, you can read about those <a href="#tag--Ogmios">here</a>.
        </div>
      operationId: ogmios
        
components:
  #!params!#
  #!requestBodies!#
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer Auth token generated via https://koios.rest Profile page. Using this token value allows consumers to use higher limits than public unauthenticated requests.
  #!schemas!#
  headers: {}
  responses:
    NotFound:
      description: The server does not recognise the combination of endpoint and parameters provided
    Unauthorized:
      description: Access token is missing or invalid
    BadRequest:
      description: The server cannot process the request due to invalid input
tags:
  - name: Network
    description: Query information about the network
    x-tag-expanded: false
  - name: Epoch
    description: Query epoch-specific details
    x-tag-expanded: false
  - name: Block
    description: Query information about particular block on chain
    x-tag-expanded: false
  - name: Transactions
    description: Query blockchain transaction details
    x-tag-expanded: false
  - name: Stake Account
    description: Query details about specific stake account addresses
    x-tag-expanded: false
  - name: Address
    description: Query information about specific address(es)
    x-tag-expanded: false
  - name: Asset
    description: Query Asset related informations
    x-tag-expanded: false
  - name: Governance
    description: Query information about governance for network
    x-tag-expanded: false
  - name: Pool
    description: Query information about specific pools
    x-tag-expanded: false
  - name: Script
    description: Query information about specific scripts (Smart Contracts)
    x-tag-expanded: false
  - name: Ogmios
    description: |
      Various stateless queries against Ogmios v6 instance. Please note that ogmios follows JSON-RPC 2.0 method, the example spec on koios.rest is *ONLY* for `queryNetwork/tip`,
      but all the methods listed below are all accepted. Instead of duplicating specs, we would refer you directly to Ogmios documentation [here](https://ogmios.dev/api) for complete specs.

        <br>
        <div style="background-color: #222; padding: 12px 0px 12px 12px;border-left: 5px solid  rgb(173, 44, 44);font-size: var(--font-size-regular);">
        Note that for queries to be stateless across instances on the globe, we cannot acquire local state as successive calls will be across different instances. Additionally, `queryLedgerState/utxo` method is removed to avoid DDoS impacts.
        Thus, we only expose the following methods from monitoring servers, instance providers can expose entire ogmios endpoints if desirable:
        </div>


        ### Network
        - [queryNetwork/blockHeight](https://ogmios.dev/api/#operation-publish-/?QueryNetworkBlockHeight)
        - [queryNetwork/genesisConfiguration](https://ogmios.dev/api/#operation-publish-/?QueryNetworkGenesisConfiguration)
        - [queryNetwork/startTime](https://ogmios.dev/api/#operation-publish-/?QueryNetworkStartTime)
        - [queryNetwork/tip](https://ogmios.dev/api/#operation-publish-/?QueryNetworkTip)
        ### Ledger-State
        - [queryLedgerState/epoch](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateEpoch)
        - [queryLedgerState/eraStart](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateEraStart)
        - [queryLedgerState/eraSummaries](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateEraSummaries)
        - [queryLedgerState/liveStakeDistribution](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateLiveStakeDistribution)
        - [queryLedgerState/protocolParameters](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateProtocolParameters)
        - [queryLedgerState/proposedProtocolParameters](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateProposedProtocolParameters)
        - [queryLedgerState/stakePools](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateStakePools)
        ### Transactions
        - [submitTransaction](https://ogmios.dev/mini-protocols/local-tx-submission/#submitting-transactions)
        - [evaluateTransaction](https://ogmios.dev/mini-protocols/local-tx-submission/#evaluating-transactions)
    x-tag-expanded: true
security:
  - {}
  - bearerAuth: []
