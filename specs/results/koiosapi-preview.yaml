openapi: 3.1.0
info:
  title: Koios API
  contact:
    name: Koios Core Team
    url: https://t.me/CardanoKoios
    email: general@koios.rest
  license:
    name: Creative Commons Attribution 4.0 International
    url: https://github.com/cardano-community/koios-artifacts/blob/main/LICENSE
  version: v1.1.1-dev
  description: |
    Koios is best described as a Decentralized and Elastic RESTful query layer for exploring data on Cardano blockchain to consume within applications/wallets/explorers/etc. This page not only provides an OpenAPI Spec for live implementation, but also ability to execute live demo from client browser against each endpoint with pre-filled examples.

    # API Usage

    The endpoints served by Koios can be browsed from the left side bar of this site. You will find that almost each endpoint has an example that you can `Try` and will help you get an example in shell using cURL. For public queries, you do not need to register yourself - you can simply use them as per the examples provided on individual endpoints. But in addition, the [PostgREST API](https://postgrest.org/en/stable/api.html) used underneath provides a handful of features that can be quite handy for you to improve your queries to directly grab very specific information pertinent to your calls, reducing data you download and process.

    ## Vertical Filtering

    Instead of returning entire row, you can elect which rows you would like to fetch from the endpoint by using the `select` parameter with corresponding columns separated by commas. See example below (first is complete information for tip, while second command gives us 3 columns we are interested in):<br><br>

    ``` bash
    curl "https://api.koios.rest/api/v1/tip"

    # [{"hash":"4d44c8a453e677f933c3df42ebcf2fe45987c41268b9cfc9b42ae305e8c3d99a","epoch":317,"abs_slot":51700871,"epoch_slot":120071,"block_height":6806994,"block_time":1643267162}]

    curl "https://api.koios.rest/api/v1/blocks?select=epoch,epoch_slot,block_height"

    # [{"epoch":317,"epoch_slot":120071,"block_height":6806994}]
    ```

    ## Horizontal Filtering

    You can filter the returned output based on specific conditions using operators against a column within returned result. Consider an example where you would want to query blocks minted in first 3 minutes of epoch 250 (i.e. epoch_slot was less than 180). To do so your query would look like below:<br><br>
    ``` bash
    curl "https://api.koios.rest/api/v1/blocks?epoch=eq.250&epoch_slot=lt.180"

    # [{"hash":"8fad2808ac6b37064a0fa69f6fe065807703d5235a57442647bbcdba1c02faf8","epoch":250,"abs_slot":22636942,"epoch_slot":142,"block_height":5385757,"block_time":1614203233,"tx_count":65,"vrf_key":"vrf_vk14y9pjprzlsjvjt66mv5u7w7292sxp3kn4ewhss45ayjga5vurgaqhqknuu","pool":null,"op_cert_counter":2},
    #  {"hash":"9d33b02badaedc0dedd0d59f3e0411e5fb4ac94217fb5ee86719e8463c570e16","epoch":250,"abs_slot":22636800,"epoch_slot":0,"block_height":5385756,"block_time":1614203091,"tx_count":10,"vrf_key":"vrf_vk1dkfsejw3h2k7tnguwrauqfwnxa7wj3nkp3yw2yw3400c4nlkluwqzwvka6","pool":null,"op_cert_counter":2}]
    ```

    Here, we made use of `eq.` operator to denote a filter of "value equal to" against `epoch` column. Similarly, we added a filter using `lt.` operator to denote a filter of "values lower than" against `epoch_slot` column. You can find a complete list of operators supported in PostgREST documentation (commonly used ones extracted below):

    |Abbreviation|In PostgreSQL|Meaning                                    |
    |------------|-------------|-------------------------------------------|
    |eq          |`=`          |equals                                     |
    |gt          |`>`          |greater than                               |
    |gte         |`>=`         |greater than or equal                      |
    |lt          |`<`          |less than                                  |
    |lte         |`<=`         |less than or equal                         |
    |neq         |`<>` or `!=` |not equal                                  |
    |like        |`LIKE`       |LIKE operator (use * in place of %)        |
    |in          |`IN`         |one of a list of values, e.g. `?a=in.("hi,there","yes,you")`|
    |is          |`IS`         |checking for exact equality (null,true,false,unknown)|
    |cs          |`@>`         |contains e.g. `?tags=cs.{example, new}`    |
    |cd          |`<@`         |contained in e.g. `?values=cd.{1,2,3}`     |
    |not         |`NOT`        |negates another operator                   |
    |or          |`OR`         |logical `OR` operator                      |
    |and         |`AND`        |logical `AND` operator                     |

    ## Pagination (offset/limit)

    When you query any endpoint in PostgREST, the number of observations returned will be limited to a maximum of 1000 rows (set via `max-rows` config option in the `grest.conf` file. This - however - is a result of a paginated call, wherein the [ up to ] 1000 records you see without any parameters is the first page. If you want to see the next 1000 results, you can always append `offset=1000` to view the next set of results. But what if 1000 is too high for your use-case and you want smaller page? Well, you can specify a smaller limit using parameter `limit`, which will see shortly in an example below. The obvious question at this point that would cross your mind is - how do I know if I need to offset and what range I am querying? This is where headers come in to your aid.  

    The default headers returned by PostgREST will include a `Content-Range` field giving a range of observations returned. For large tables, this range could include a wildcard `*` as it is expensive to query exact count of observations from endpoint. But if you would like to get an estimate count without overloading servers, PostgREST can utilise Postgres's own maintenance thread results (which maintain stats for each table) to provide you a count, by specifying a header `"Preferred: count=estimated"`.  

    Sounds confusing? Let's see this in practice, to hopefully make it easier.
    Consider a simple case where I want query `blocks` endpoint for `block_height` column and focus on `content-range` header to monitor the rows we discussed above.<br><br>

    ``` bash
    curl -s "https://api.koios.rest/api/v1/blocks?select=block_height" -I | grep -i content-range

    # content-range: 0-999/*

    ```

    As we can see above, the number of observations returned was 1000 (range being 0-999), but the total size was not queried to avoid wait times. Now, let's modify this default behaviour to query rows beyond the first 999, but this time - also add another clause to limit results by 500. We can do this using `offset=1000` and `limit=500` as below:<br><br>

    ``` bash
    curl -s "https://api.koios.rest/api/v1/blocks?select=block_height&offset=1000&limit=500" -I | grep -i content-range

    # content-range: 1000-1499/*

    ```

    For GET endpoints, there is also another method to achieve the above, instead of adding parameters to the URL itself, you can specify a `Range` header as below to achieve something similar:<br><br>

    ``` bash
    curl -s "https://api.koios.rest/api/v1/blocks?select=block_height" -H "Range: 1000-1499" -I | grep -i content-range

    # content-range: 1000-1499/*

    ```

    The above methods for pagination are very useful to keep your queries light as well as process the output in smaller pages, making better use of your resources and respecting server timeouts for response times.

    ## Ordering

    You can set a sorting order for returned queries against specific column(s).
    Consider example where you want to check `epoch` and `epoch_slot` for the first 5 blocks created by a particular pool, i.e. you can set order to ascending based on block_height column and add horizontal filter for that pool ID as below:<br><br>

    ``` bash
    curl -s "https://api.koios.rest/api/v1/blocks?pool=eq.pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc&order=block_height.asc&limit=5"

    # [{"hash":"610b4c7bbebeeb212bd002885048cc33154ba29f39919d62a3d96de05d315706","epoch":236,"abs_slot":16594295,"epoch_slot":5495,"block_height":5086774,"block_time":1608160586,"tx_count":1,"vrf_key":"vrf_vk18x0e7dx8j37gdxftnn8ru6jcxs7n6acdazc4ykeda2ygjwg9a7ls7ns699","pool":"pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc","op_cert_counter":1},
    # {"hash":"d93d1db5275329ab695d30c06a35124038d8d9af64fc2b0aa082b8aa43da4164","epoch":236,"abs_slot":16597729,"epoch_slot":8929,"block_height":5086944,"block_time":1608164020,"tx_count":7,"vrf_key":"vrf_vk18x0e7dx8j37gdxftnn8ru6jcxs7n6acdazc4ykeda2ygjwg9a7ls7ns699","pool":"pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc","op_cert_counter":1},
    # {"hash":"dc9496eae64294b46f07eb20499ae6dae4d81fdc67c63c354397db91bda1ee55","epoch":236,"abs_slot":16598058,"epoch_slot":9258,"block_height":5086962,"block_time":1608164349,"tx_count":1,"vrf_key":"vrf_vk18x0e7dx8j37gdxftnn8ru6jcxs7n6acdazc4ykeda2ygjwg9a7ls7ns699","pool":"pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc","op_cert_counter":1},
    # {"hash":"6ebc7b734c513bc19290d96ca573a09cac9503c5a349dd9892b9ab43f917f9bd","epoch":236,"abs_slot":16601491,"epoch_slot":12691,"block_height":5087097,"block_time":1608167782,"tx_count":0,"vrf_key":"vrf_vk18x0e7dx8j37gdxftnn8ru6jcxs7n6acdazc4ykeda2ygjwg9a7ls7ns699","pool":"pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc","op_cert_counter":1},
    # {"hash":"2eac97548829fc312858bc56a40f7ce3bf9b0ca27ee8530283ccebb3963de1c0","epoch":236,"abs_slot":16602308,"epoch_slot":13508,"block_height":5087136,"block_time":1608168599,"tx_count":1,"vrf_key":"vrf_vk18x0e7dx8j37gdxftnn8ru6jcxs7n6acdazc4ykeda2ygjwg9a7ls7ns699","pool":"pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc","op_cert_counter":1}]
    ```

    ## Response Formats

    You can get the results from the PostgREST endpoints in CSV or JSON formats. The default response format will always be JSON, but if you'd like to switch, you can do so by specifying header `'Accept: text/csv'` or `'Accept: application/json'`.
    Below is an example of JSON/CSV output making use of above to print first in JSON (default), and then override response format to CSV.<br><br>

    ``` bash
    curl -s "https://api.koios.rest/api/v1/blocks?select=epoch,epoch_slot,block_time&limit=3"

    # [{"epoch":318,"epoch_slot":27867,"block_time":1643606958},
    # {"epoch":318,"epoch_slot":27841,"block_time":1643606932},
    # {"epoch":318,"epoch_slot":27839,"block_time":1643606930}]

    curl -s "https://api.koios.rest/api/v1/blocks?select=epoch,epoch_slot,block_time&limit=3" -H "Accept: text/csv"

    # epoch,epoch_slot,block_time
    # 318,28491,1643607582
    # 318,28479,1643607570
    # 318,28406,1643607497

    ```

    ## Limits

    While use of Koios is completely free and there are no registration requirements to the usage, the monitoring layer will only restrict spam requests that can potentially cause high amount of load to backends. The emphasis is on using list of objects first, and then [bulk where available] query specific objects to drill down where possible - which forms higher performance results to consumer as well as instance provider. Some basic protection against patterns that could cause unexpected resource spikes are protected as per below:

      - Burst Limit: A single IP can query an endpoint up to 100 times within 10 seconds (that's about 8.64 million requests within a day). The sleep time if a limit is crossed is minimal (60 seconds) for that IP - during which, the monitoring layer will return HTTP Status `429 - Too many requests`.  
      - Pagination/Limits: Any query results fetched will be paginated by 1000 records (you can reduce limit and or control pagination offsets on URL itself, see API > Pagination section for more details).
      - Query timeout: If a query from server takes more than 30 seconds, it will return a HTTP Status of `504 - Gateway timeout`. This is because we would want to ensure you're using the queries optimally, and more often than not - it would indicate that particular endpoint is not optimised (or the network connectivity is not optimal between servers).

    Yet, there may be cases where the above restrictions may need exceptions (for example, an explorer or a wallet might need more connections than above - going beyond the Burst Limit). For such cases, it is best to approach the team and we can work towards a solution.

    # Authentication

    While Koios public tier remains unauthenticated and allows queries without any authentication, it has low limits to prevent actions against an erroraneous query/loop from a consumer. There is also a Free tier which requires setting up Bearer Auth token that is linked to the owner's wallet account (which can be connected to via [Koios website](https://koios.rest/pricing/Pricing.html) ).
    The examples across this API site already [supports authentication](/#auth), for you to use in the queries.

    # Community projects

    A big thank you to the following projects who are already starting to use Koios from early days. A list of tools, libraries and projects utilising Koios (atleast those who'd like to be named) can be found [here](https://www.koios.rest/community.html)

  x-logo:
    url: "https://api.koios.rest/images/koios.png"
servers:
  - url: https://api.koios.rest/api/v1
  - url: https://guild.koios.rest/api/v1
  - url: https://preview.koios.rest/api/v1
  - url: https://preprod.koios.rest/api/v1
paths:

  /tip: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tip"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Query Chain Tip
      description: Get the tip info about the latest block seen by chain
      operationId: tip
  /genesis: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genesis"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get Genesis info
      description: Get the Genesis parameters used to start specific era on chain
      operationId: genesis
  /totals: #RPC
    get:
      tags:
        - Network
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/totals"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get historical tokenomic stats
      description: >-
        Get the circulating utxo, treasury, rewards, supply and reserves in
        lovelace for specified epoch, all epochs if empty
      operationId: totals
  /param_updates: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/param_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Param Update Proposals
      description: Get all parameter update proposals submitted to the chain starting Shelley era
      operationId: param_updates
  /reserve_withdrawals: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reserve_withdrawals"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Reserve Withdrawals
      description: List of all withdrawals from reserves against stake accounts
      operationId: reserve_withdrawals
  /treasury_withdrawals: #RPC
    get:
      tags:
        - Network
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reserve_withdrawals"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Treasury Withdrawals
      description: List of all withdrawals from treasury against stake accounts
      operationId: treasury_withdrawals

  /epoch_info: #RPC
    get:
      tags:
        - Epoch
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
        - $ref: "#/components/parameters/_include_next_epoch"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Epoch Information
      description: Get the epoch information, all epochs if no epoch specified
      operationId: epoch_info
  /epoch_params: #RPC
    get:
      tags:
        - Epoch
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_params"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Epoch's Protocol Parameters
      description: >-
        Get the protocol parameters for specific epoch, returns information
        about all epochs if no epoch specified
      operationId: epoch_params
  /epoch_block_protocols: #RPC
    get:
      tags:
        - Epoch
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/epoch_block_protocols"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Epoch's Block Protocols
      description: >-
        Get the information about block protocol distribution in epoch
      operationId: epoch_block_protocols

  /blocks: #RPC
    get:
      tags:
        - Block
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blocks"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block List
      description: Get summarised details about all blocks (paginated - latest first)
      operationId: blocks
  /block_info: #RPC
    post:
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_hashes"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Information
      description: Get detailed information about a specific block
      operationId: block_info
  /block_txs: #RPC
    post:
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_hashes"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Transactions
      description: Get a list of all transactions included in provided blocks
      operationId: block_txs
  /block_tx_info: #RPC
    post:
      tags:
        - Block
      requestBody:
        $ref: "#/components/requestBodies/block_tx_info"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/block_tx_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Block Transactions (Detailed Info)
      description: Get detailed information about transaction(s) for requested blocks
      operationId: block_tx_info

  /utxo_info: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/utxo_refs_with_extended"
      responses:
        "200":
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: UTxO Info
      description: Get UTxO set for requested UTxO references
      operationId: utxo_info
  /tx_info: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Information
      description: Get detailed information about transaction(s)
      operationId: tx_info
  /tx_metadata: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_metadata"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Metadata
      description: Get metadata information (if any) for given transaction(s)
      operationId: tx_metadata
  /tx_metalabels: #RPC
    get:
      tags:
        - Transactions
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_metalabels"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Metadata Labels
      description: Get a list of all transaction metalabels
      operationId: tx_metalabels
  /submittx: #submit-api
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/txbin"
      x-code-samples:
        - lang: "Shell"
          source: |
            # Assuming ${data} is a raw binary serialized transaction on the file-system.
            # If using a CLI-generated tx file, please ensure to deserialise (using `xxd -p -r <<< $(jq .cborHex ${tx.signed}) > ${data}`) first before submitting.
            curl -X POST \
                --header "Content-Type: application/cbor" \
                --data-binary @${data} https://api.koios.rest/api/v1/submittx
      responses:
        "202":
          description: OK
          content:
            application/json:
              schema:
                description: The transaction id.
                type: string
                format: hex
                minLength: 64
                maxLength: 64
              example: 92bcd06b25dfbd89b578d536b4d3b7dd269b7c2aa206ed518012cffe0444d67f
        "400":
          description: An error occured while submitting transaction.
      summary: Submit Transaction
      description: Submit an already serialized transaction to the network.
      operationId: submittx
  /tx_status: #RPC
    post:
      tags:
        - Transactions
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_status"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction Status
      description: Get the number of block confirmations for a given transaction hash list
      operationId: tx_status
  /tx_utxos: #RPC
    post:
      tags:
        - Transactions
      deprecated: true
      requestBody:
        $ref: "#/components/requestBodies/tx_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tx_utxos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transaction UTxOs
      description: Get UTxO set (inputs/outputs) of transactions [DEPRECATED - Use /utxo_info instead].
      operationId: tx_utxos

  /address_info: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/payment_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Information
      description: Get address info - balance, associated stake address (if any) and UTxO set for given addresses
      operationId: address_info
  /address_utxos: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/payment_addresses_with_extended"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address UTXOs
      description: Get UTxO set for given addresses
      operationId: address_utxos
  /credential_utxos: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/credential_utxos"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: UTxOs from payment credentials
      description: Get UTxO details for requested payment credentials
      operationId: credential_utxos
  /address_txs: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/address_txs"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Transactions
      description: Get the transaction hash list of input address array, optionally filtering after specified block height (inclusive)
      operationId: address_txs
  /credential_txs: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/credential_txs"
      responses:
        "200":
          description: Array of transaction hashes for given credential(s)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Transactions from payment credentials
      description: Get the transaction hash list of input payment credential array, optionally filtering after specified block height (inclusive)
      operationId: credential_txs
  /address_assets: #RPC
    post:
      tags:
        - Address
      requestBody:
        $ref: "#/components/requestBodies/payment_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_assets"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Address Assets
      description: Get the list of all the assets (policy, name and quantity) for given addresses
      operationId: address_assets

  /account_list: #RPC
    get:
      tags:
        - Stake Account
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account List
      description: Get a list of all stake addresses that have atleast 1 transaction
      operationId: account_list
  /account_info: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Information
      description: Get the account information for given stake addresses
      operationId: account_info
  /account_info_cached: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Information (Cached)
      description: Get the cached account information for given stake addresses (effective for performance query against registered accounts)
      operationId: account_info_cached
  /account_utxos: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_extended"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: UTxOs for stake addresses (accounts)
      description: Get a list of all UTxOs for given stake addresses (account)s
      operationId: account_utxos
  /account_txs: #RPC
    get:
      tags:
        - Stake Account
      parameters:
        - $ref: "#/components/parameters/_stake_address"
        - $ref: "#/components/parameters/_after_block_height"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Txs
      description: Get a list of all Txs for a given stake address (account)
      operationId: account_txs
  /account_rewards: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_rewards"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Rewards
      description: >-
        Get the full rewards history (including MIR) for given stake addresses
      operationId: account_rewards
  /account_updates: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Updates
      description: >-
        Get the account updates (registration, deregistration, delegation and
        withdrawals) for given stake addresses
      operationId: account_updates
  /account_addresses: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_first_only_and_empty"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Addresses
      description: Get all addresses associated with given staking accounts
      operationId: account_addresses
  /account_assets: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_assets"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account Assets
      description: Get the native asset balance for a given stake address
      operationId: account_assets
  /account_history: #RPC
    post:
      tags:
        - Stake Account
      requestBody:
        $ref: "#/components/requestBodies/stake_addresses_with_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Account History
      description: Get the staking history of given stake addresses (accounts)
      operationId: account_history

  /asset_list: #RPC
    get:
      tags:
        - Asset
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset List
      description: Get the list of all native assets (paginated)
      operationId: asset_list
  /policy_asset_list: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of brief information of assets under the same policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset List
      description: Get the list of asset under the given policy (including balances)
      operationId: policy_asset_list
  /asset_token_registry: #RPC
    get:
      tags:
        - Asset
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_token_registry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Token Registry
      description: Get a list of assets registered via token registry on github
      operationId: asset_token_registry
  /asset_info: #RPC
    post:
      tags:
        - Asset
      requestBody:
        $ref: "#/components/requestBodies/asset_list"
      responses:
        "200":
          description: Array of detailed asset information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Information (Bulk)
      description: Get the information of a list of assets including first minting & token registry metadata
      operationId: asset_info
  /asset_utxos: #RPC
    post:
      tags:
        - Asset
      requestBody:
        $ref: "#/components/requestBodies/asset_list_with_extended"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset UTXOs
      description: Get the UTXO information of a list of assets including
      operationId: asset_utxos
  /asset_history: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Array of asset mint/burn history
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset History
      description: Get the mint/burn history of an asset
      operationId: asset_history
  /asset_addresses: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Addresses
      description: Get the list of all addresses holding a given asset <br><br>
        `Note - Due to cardano's UTxO design and usage from projects, asset to addresses map can be infinite. Thus, for a small subset of active projects 
        with millions of transactions, these might end up with timeouts (HTTP code 504) on free layer. Such large-scale projects are free to subscribe to 
        query layers to have a dedicated cache table for themselves served via Koios.`
      operationId: asset_addresses
  /asset_nft_address: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy_nft"
        - $ref: "#/components/parameters/_asset_name_nft"
      responses:
        "200":
          description: Payment addresses currently holding the given NFT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_nft_address"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: NFT Address
      description: Get the address where specified NFT currently reside on.
      operationId: asset_nft_address
  /policy_asset_addresses: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of asset names and payment addresses for the given policy (including balances)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset Address List
      description: Get the list of addresses with quantity for each asset on the given policy <br><br>
        `Note - Due to cardano's UTxO design and usage from projects, asset to addresses map can be infinite. Thus, for a small subset of active projects 
        with millions of transactions, these might end up with timeouts (HTTP code 504) on free layer. Such large-scale projects are free to subscribe to 
        query layers to have a dedicated cache table for themselves served via Koios.`
      operationId: policy_asset_addresses
  /policy_asset_info: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of detailed information of assets under the same policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Policy Asset Information
      description: Get the information for all assets under the same policy
      operationId: policy_asset_info
  /asset_summary: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Array of asset summary information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_summary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Summary
      description: Get the summary of an asset (total transactions exclude minting/total wallets include only wallets with asset balance)
      operationId: asset_summary
  /asset_txs: #RPC
    get:
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
        - $ref: "#/components/parameters/_after_block_height"
        - $ref: "#/components/parameters/_history"
      responses:
        "200":
          description: An array of Tx hashes that included the given asset (latest first)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_txs"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Transactions
      description: Get the list of current or all asset transaction hashes (newest first)
      operationId: asset_txs
  /asset_address_list: #RPC
    get:
      tags:
        - Asset
      deprecated: true
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
        - $ref: "#/components/parameters/_asset_name"
      responses:
        "200":
          description: Array of payment addresses holding the given token (including balances) [DEPRECATED - replaced by asset_addresses]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset_addresses"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Address List
      description: Get the list of all addresses holding a given asset [DEPRECATED - replaced by asset_addresses]
      operationId: asset_address_list
  /asset_policy_info: #RPC
    get:
      deprecated: true
      tags:
        - Asset
      parameters:
        - $ref: "#/components/parameters/_asset_policy"
      responses:
        "200":
          description: Array of detailed information of assets under the same policy [DEPRECATED - replaced by policy_asset_info]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policy_asset_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Asset Policy Information
      description: Get the information for all assets under the same policy (DEPRECATED - replaced by policy_asset_info)
      operationId: asset_policy_info

  /pool_list: #RPC
    get:
      tags:
        - Pool
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool List
      description: List of brief info for all pools
      operationId: pool_list
  /pool_info: #RPC
    post:
      tags:
        - Pool
      requestBody:
        $ref: "#/components/requestBodies/pool_ids"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Information
      description: Current pool statuses and details for a specified list of pool ids
      operationId: pool_info
  /pool_stake_snapshot: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_snapshot"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Stake Snapshot
      description: Returns Mark, Set and Go stake snapshots for the selected pool, useful for leaderlog calculation
      operationId: pool_stake_snapshot
  /pool_delegators: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_delegators"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Delegators List
      description: Return information about live delegators for a given pool.
      operationId: pool_delegators
  /pool_delegators_history: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_delegators_history"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Delegators History
      description: Return information about active delegators (incl. history) for a given pool and epoch number (all epochs if not specified).
      operationId: pool_delegators_history
  /pool_blocks: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_blocks"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Blocks
      description: >-
        Return information about blocks minted by a given pool for all epochs
        (or _epoch_no if provided)
      operationId: pool_blocks
  /pool_history: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32"
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_history_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Stake, Block and Reward History
      description: >-
        Return information about pool stake, block and reward history in a given epoch _epoch_no
        (or all epochs that pool existed for, in descending order if no _epoch_no was provided)
      operationId: pool_history
  /pool_updates: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_pool_bech32_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_updates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Updates (History)
      description: Return all pool updates for all pools or only updates for specific pool if specified
      operationId: pool_updates
  /pool_registrations: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_registrations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Registrations
      description: Return all pool registrations initiated in the requested epoch
      operationId: pool_registrations
  /pool_retirements: #RPC
    get:
      tags:
        - Pool
      parameters:
        - $ref: "#/components/parameters/_epoch_no"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_registrations"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Retirements
      description: Return all pool retirements initiated in the requested epoch
      operationId: pool_retirements
  /pool_relays: #RPC
    get:
      tags:
        - Pool
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_relays"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Relays
      description: A list of registered relays for all pools
      operationId: pool_relays
  /pool_metadata: #RPC
    post:
      tags:
        - Pool
      requestBody:
        $ref: "#/components/requestBodies/pool_ids_optional"
      responses:
        "200":
          description: Success!!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pool_metadata"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Pool Metadata
      description: Metadata (on & off-chain) for all pools
      operationId: pool_metadata

  /script_info: #RPC
    post:
      tags:
        - Script
      requestBody:
        $ref: "#/components/requestBodies/script_hashes"
      responses:
        "200":
          description: Array of information for scripts requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Script Information
      description: List of script information for given script hashes
      operationId: script_info
  /native_script_list: #RPC
    get:
      tags:
        - Script
      responses:
        "200":
          description: List of native script and creation tx hash pairs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Native Script List
      description: List of all existing native script hashes along with their creation transaction hashes
      operationId: native_script_list
  /plutus_script_list: #RPC
    get:
      tags:
        - Script
      responses:
        "200":
          description: List of Plutus script and creation tx hash pairs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_list"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Plutus Script List
      description: List of all existing Plutus script hashes along with their creation transaction hashes
      operationId: plutus_script_list
  /script_redeemers: #RPC
    get:
      tags:
        - Script
      parameters:
        - $ref: "#/components/parameters/_script_hash"
      responses:
        "200":
          description: Array of all redeemers for a given script hash
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/script_redeemers"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Script Redeemers
      description: List of all redeemers for a given script hash
      operationId: script_redeemers
  /script_utxos: #RPC
    get:
      tags:
        - Script
      parameters:
        - $ref: "#/components/parameters/_script_hash"
        - $ref: "#/components/parameters/_extended"
      responses:
        "200":
          description: List of UTXOs for a given script hash
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utxo_infos"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Script UTXOs
      description: List of all UTXOs for a given script hash
      operationId: script_utxos
  /datum_info: #RPC
    post:
      tags:
        - Script
      requestBody:
        $ref: "#/components/requestBodies/datum_hashes"
      responses:
        "200":
          description: Array of datum information for given datum hashes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/datum_info"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Datum Information
      description: List of datum information for given datum hashes
      operationId: datum_info
  /ogmios: #ogmios-api
    post:
      tags:
        - Ogmios
      requestBody:
        $ref: "#/components/requestBodies/ogmios"
      responses:
        "200":
          description: Current tip of the chain, identified by a slot and a block header hash.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ogmiostip"
        "400":
          $ref: "#/components/responses/BadRequest"
      summary: Query Example
      description: |
        Query the current tip of the Network.

        <br>
        <div style="background-color: #222; padding: 12px 0px 12px 12px;border-left: 5px solid  rgb(173, 44, 44);font-size: var(--font-size-regular);">
        We do support transparent forwarding for various methods from Ogmios, you can read about those <a href="#tag--Ogmios">here</a>.
        </div>
      operationId: ogmios
        
components:
  parameters:
    _after_block_height:
      deprecated: false
      name: _after_block_height
      description: Block height for specifying time delta
      schema:
        type: number
        example: 50000
      in: query
      required: false
      allowEmptyValue: true
    _epoch_no:
      deprecated: false
      name: _epoch_no
      description: Epoch Number to fetch details for
      schema:
        type: string
      example: "12"
      in: query
      required: false
      allowEmptyValue: true
    _stake_address:
      deprecated: false
      name: _stake_address
      description: Cardano staking address (reward account) in bech32 format
      schema:
        type: string
      example: "stake_test1uzs5rxys8qy5jnr9g0mkj860ms5n92nrykmrgyumpf2ytmsejj4m6"
      in: query
      required: true
      allowEmptyValue: false
    _asset_policy:
      deprecated: false
      name: _asset_policy
      description: Asset Policy ID in hexadecimal format (hex)
      schema:
        type: string
      example: "065270479316f1d92e00f7f9f095ebeaac9d009c878dc35ce36d3404"
      in: query
      required: true
      allowEmptyValue: false
    _asset_name:
      deprecated: false
      name: _asset_name
      description: Asset Name in hexadecimal format (hex), empty asset name returns royalties
      schema:
        type: string
      example: "433374"
      in: query
      required: false
      allowEmptyValue: true
    _asset_policy_nft:
      deprecated: false
      name: _asset_policy
      description: NFT Policy ID in hexadecimal format (hex)
      schema:
        type: string
      example: "005b8ca355aec6125531ebea89bf9ef8df90121ea5717f0c55027e35"
      in: query
      required: true
      allowEmptyValue: false
    _asset_name_nft:
      deprecated: false
      name: _asset_name
      description: NFT Name in hexadecimal format (hex)
      schema:
        type: string
      example: "4d43"
      in: query
      required: false
      allowEmptyValue: true
    _extended:
      deprecated: false
      name: _extended
      description: Controls whether or not certain optional fields supported by a given endpoint are populated as a part of the call
      schema:
        type: boolean
      example: false
      in: query
      required: false
      allowEmptyValue: true
    _history:
      deprecated: false
      name: _history
      description: Include all historical transactions, setting to false includes only the non-empty ones
      schema:
        type: boolean
      example: false
      in: query
      required: false
      allowEmptyValue: false
    _include_next_epoch:
      deprecated: false
      name: _include_next_epoch
      description: Include information about nearing but not yet started epoch, to get access to active stake snapshot information if available
      schema:
        type: boolean
      example: false
      in: query
      required: false
      allowEmptyValue: true
    _pool_bech32:
      deprecated: false
      name: _pool_bech32
      description: Pool ID in bech32 format
      schema:
        type: string
      example: "pool1leml52hm4fcp3hhe4zye08qz27llhj7d339p3gs0tl85cstx59q"
      in: query
      required: true
      allowEmptyValue: false
    _pool_bech32_optional:
      deprecated: false
      name: _pool_bech32
      description: Pool ID in bech32 format (optional)
      schema:
        type: string
      example: "pool1leml52hm4fcp3hhe4zye08qz27llhj7d339p3gs0tl85cstx59q"
      in: query
      required: false
      allowEmptyValue: true
    _script_hash:
      deprecated: false
      name: _script_hash
      description: Script hash in hexadecimal format (hex)
      schema:
        type: string
      example: "f758cf422ca0cbed7d9d6fad1eb5a3c70537d62e661ad450dd2a3810"
      in: query
      required: true
      allowEmptyValue: false
  requestBodies:
    block_hashes:
      content:
        application/json:
          schema:
            required:
              - _block_hashes
            type: object
            properties:
              _block_hashes:
                format: text
                type: array
                items:
                  $ref: "#/components/schemas/blocks/items/properties/hash"
            example:
              _block_hashes:
                - a4504e2495ed03b48be36676f430c54dca0769d29f72ebf18d493abf42d2167b
                - 8e7a6206d2b21ae4f26e7e09353fadae17f838a63d095c2be51acbd16e9b7716
                - 1baaf7812ed48e663adb9eeaa68fe25034e5e30b4f8e56cc8600cac5e9d42ce7
      description: Array of block hashes
    block_tx_info:
      content:
        application/json:
          schema:
            required:
              - _block_hashes
            type: object
            properties:
              _block_hashes:
                format: text
                type: array
                items:
                  $ref: "#/components/schemas/blocks/items/properties/hash"
              _inputs:
                format: boolean
                type: boolean
                description: Controls whether to include transaction inputs in the result
              _metadata:
                format: boolean
                type: boolean
                description: Controls whether to include transaction metadata in the result
              _assets:
                format: boolean
                type: boolean
                description: Controls whether to include assets involved within transaction the result
              _withdrawals:
                format: boolean
                type: boolean
                description: Controls whether to include any stake account reward withdrawals in the result
              _certs:
                format: boolean
                type: boolean
                description: Controls whether to include transaction certificates in the result
              _scripts:
                format: boolean
                type: boolean
                description: Controls whether to include any details regarding collateral/reference/datum/script objects in the result
            example:
              _block_hashes:
                - a4504e2495ed03b48be36676f430c54dca0769d29f72ebf18d493abf42d2167b
                - 8e7a6206d2b21ae4f26e7e09353fadae17f838a63d095c2be51acbd16e9b7716
                - 1baaf7812ed48e663adb9eeaa68fe25034e5e30b4f8e56cc8600cac5e9d42ce7
              _inputs: false
              _metadata: false
              _assets: false
              _withdrawals: false
              _certs: false
              _scripts: false
      description: Array of block hashes
    payment_addresses:
      content:
        application/json:
          schema:
            required:
              - _addresses
            type: object
            properties:
              _addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano payment address(es) in bech32 format
            example:
              _addresses:
                - addr_test1vpfwv0ezc5g8a4mkku8hhy3y3vp92t7s3ul8g778g5yegsgalc6gc
                - addr_test1vqneq3v0dqh3x3muv6ee3lt8e5729xymnxuavx6tndcjc2cv24ef9
      description: Array of Cardano payment address(es)
    payment_addresses_with_extended:
      content:
        application/json:
          schema:
            required:
              - _addresses
            type: object
            properties:
              _addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano payment address(es) in bech32 format
              _extended:
                format: boolean
                type: boolean
                description: Controls whether or not certain optional fields supported by a given endpoint are populated as a part of the call
            example:
              _addresses:
                - addr_test1vpfwv0ezc5g8a4mkku8hhy3y3vp92t7s3ul8g778g5yegsgalc6gc
                - addr_test1vqneq3v0dqh3x3muv6ee3lt8e5729xymnxuavx6tndcjc2cv24ef9
              _extended: true
      description: Array of Cardano payment address(es) with extended flag to toggle additional fields
    address_txs:
      content:
        application/json:
          schema:
            required:
              - _addresses
            type: object
            properties:
              _addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano payment address(es) in bech32 format
              _after_block_height:
                format: integer
                type: number
                description: Only fetch information after specific block height
            example:
              _addresses:
                - addr_test1vpfwv0ezc5g8a4mkku8hhy3y3vp92t7s3ul8g778g5yegsgalc6gc
                - addr_test1vqneq3v0dqh3x3muv6ee3lt8e5729xymnxuavx6tndcjc2cv24ef9
              _after_block_height: 40356
      description: Array of Cardano payment address(es)
    stake_addresses_with_epoch_no:
      content:
        application/json:
          schema:
            required:
              - _stake_addresses
            type: object
            properties:
              _stake_addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano stake address(es) in bech32 format
              _epoch_no:
                format: integer
                type: number
                description: Only fetch information for a specific epoch
            example:
              _stake_addresses:
                - stake_test1urqntq4wexjylnrdnp97qq79qkxxvrsa9lcnwr7ckjd6w0cr04y4p
                - stake_test1up6wqzrw2h9vvjy5zfkjn0dwtymy5r29zyhf8fyhm6fat9c2am5hl
              _epoch_no: 11
      description: Array of Cardano stake address(es) in bech32 format with optional epoch no to filter by
    stake_addresses_with_first_only_and_empty:
      content:
        application/json:
          schema:
            required:
              - _stake_addresses
            type: object
            properties:
              _stake_addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano stake address(es) in bech32 format
              _first_only:
                format: boolean
                type: boolean
                description: Only return the first result
              _empty:
                format: boolean
                type: boolean
                description: Include zero quantity entries
            example:
              _stake_addresses:
                - stake_test1urqntq4wexjylnrdnp97qq79qkxxvrsa9lcnwr7ckjd6w0cr04y4p
                - stake_test1up6wqzrw2h9vvjy5zfkjn0dwtymy5r29zyhf8fyhm6fat9c2am5hl
              _first_only: false
              _empty: false
      description: Array of Cardano stake credential(s) in bech32 format alongwith flag to return first only or used UTxOs
    stake_addresses_with_extended:
      content:
        application/json:
          schema:
            required:
              - _stake_addresses
            type: object
            properties:
              _stake_addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano stake address(es) in bech32 format
              _extended:
                format: boolean
                type: boolean
                description: Controls whether or not certain optional fields supported by a given endpoint are populated as a part of the call
            example:
              _stake_addresses:
                - stake_test1urqntq4wexjylnrdnp97qq79qkxxvrsa9lcnwr7ckjd6w0cr04y4p
                - stake_test1up6wqzrw2h9vvjy5zfkjn0dwtymy5r29zyhf8fyhm6fat9c2am5hl
              _extended: true
      description: Array of Cardano stake credential(s) in bech32 format alongwith extended flag to return additional columns
    stake_addresses:
      content:
        application/json:
          schema:
            required:
              - _stake_addresses
            type: object
            properties:
              _stake_addresses:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano stake address(es) in bech32 format
            example:
              _stake_addresses:
                - stake_test1urqntq4wexjylnrdnp97qq79qkxxvrsa9lcnwr7ckjd6w0cr04y4p
                - stake_test1up6wqzrw2h9vvjy5zfkjn0dwtymy5r29zyhf8fyhm6fat9c2am5hl
      description: Array of Cardano stake credential(s) in bech32 format
    credential_txs:
      content:
        application/json:
          schema:
            required:
              - _payment_credentials
            type: object
            properties:
              _payment_credentials:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano payment credential(s) in hex format
              _after_block_height:
                format: integer
                type: number
                description: Only fetch information after specific block height
            example:
              _payment_credentials:
                - 33c378cee41b2e15ac848f7f6f1d2f78155ab12d93b713de898d855f
                - 52e63f22c5107ed776b70f7b92248b02552fd08f3e747bc745099441
              _after_block_height: 40356
      description: Array of Cardano payment credential(s) in hex format alongwith filtering based on blockheight
    credential_utxos:
      content:
        application/json:
          schema:
            required:
              - _payment_credentials
            type: object
            properties:
              _payment_credentials:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano payment credential(s) in hex format
              _extended:
                format: boolean
                type: boolean
                description: Controls whether or not certain optional fields supported by a given endpoint are populated as a part of the call           
            example:
              _payment_credentials:
                - 33c378cee41b2e15ac848f7f6f1d2f78155ab12d93b713de898d855f
                - 52e63f22c5107ed776b70f7b92248b02552fd08f3e747bc745099441
              _extended: true
      description: Array of Cardano payment credential(s) in hex format
    tx_ids:
      content:
        application/json:
          schema:
            required:
              - _tx_hashes
            type: object
            properties:
              _tx_hashes:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano Transaction hashes
            example:
              _tx_hashes:
                - f1592b29b79ae85d753913dd25644c60925a4a0683979faa33832fead4b4bd9c
                - 206f6da5b0b0de45605a95f5ce7e172be9674550f7dde3838c45cbf24bab8b00
      description: Array of Cardano Transaction hashes
    txbin:
      content:
        application/cbor:
          schema:
            type: string
            format: binary
            example: f1592b29b79ae85d753913dd25644c60925a4a0683979faa33832fead4b4bd9c
      description: Serialised Cardano Transaction
    pool_ids:
      content:
        application/json:
          schema:
            required:
              - _pool_bech32_ids
            type: object
            properties:
              _pool_bech32_ids:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano pool IDs (bech32 format)
            example:
              _pool_bech32_ids:
                - pool1p90428kec03mjdya3k4gv5d20w7lmed7ca0snknef5j977l3y8l
                - pool1wwh3k3ldzujdvgxllfwlnnkxyheafkacqlufnvpr77n5q72f9hw
                - pool1p835jxsj8py5n34lrgk6fvpgpxxvh585qm8dzvp7ups37vdet5a
      description: Array of Cardano pool IDs (bech32 format)
    pool_ids_optional:
      content:
        application/json:
          schema:
            type: object
            properties:
              _pool_bech32_ids:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano pool IDs (bech32 format)
            example:
              _pool_bech32_ids:
                - pool1p90428kec03mjdya3k4gv5d20w7lmed7ca0snknef5j977l3y8l
                - pool1wwh3k3ldzujdvgxllfwlnnkxyheafkacqlufnvpr77n5q72f9hw
                - pool1p835jxsj8py5n34lrgk6fvpgpxxvh585qm8dzvp7ups37vdet5a
      description: Array of Cardano pool IDs (bech32 format) [Optional]
    script_hashes:
      content:
        application/json:
          schema:
            type: object
            properties:
              _script_hashes:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano script hashes
            example:
              _script_hashes:
                  - c6d963e8892916ab8753d3c342037cd122123c4dd783a07af21f8dac
                  - c0c671fba483641a71bb92d3a8b7c52c90bf1c01e2b83116ad7d4536
      description: Array of Cardano script hashes
    datum_hashes:
      content:
        application/json:
          schema:
            type: object
            properties:
              _datum_hashes:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano datum hashes
            example:
              _datum_hashes:
                  - 6181b3dc623cd8812caf027a3507e9b3095388a7cf3db65983e1fddd3a84c88c
                  - f8ae55ff89e1f5366f23e16bcaf2073252337b96031a02d79e41d653b5f0a978
      description: Array of Cardano datum hashes
    asset_list:
      content:
        application/json:
          schema:
            required:
              - _asset_list
            type: object
            properties:
              _asset_list:
                format: text
                type: array
                description: Array of array of policy ID and asset names (hex)
                items:
                  type: array
                  items:
                    type: string
            example:
              _asset_list:
                - ['065270479316f1d92e00f7f9f095ebeaac9d009c878dc35ce36d3404','433374']
                - ['189e2c53985411addb8df0f3e09f70e343da69f06746c408aba672a8','15fc257714a51769e192761d674db2ee2e80137428e522f9b914debb5f785301']
      description: Array of array of policyID and asset names (hex)
    asset_list_with_extended:
      content:
        application/json:
          schema:
            required:
              - _asset_list
            type: object
            properties:
              _asset_list:
                format: text
                type: array
                description: Array of array of policy ID and asset names (hex)
                items:
                  type: array
                  items:
                    type: string
              _extended:
                format: boolean
                type: boolean
                description: Controls whether or not certain optional fields supported by a given endpoint are populated as a part of the call
            example:
              _asset_list:
                - ['065270479316f1d92e00f7f9f095ebeaac9d009c878dc35ce36d3404','433374']
                - ['189e2c53985411addb8df0f3e09f70e343da69f06746c408aba672a8','15fc257714a51769e192761d674db2ee2e80137428e522f9b914debb5f785301']
              _extended: true
      description: Array of array of policyID and asset names (hex) alongwith extended flag to return additional columns
    utxo_refs_with_extended:
      content:
        application/json:
          schema:
            required:
              - _utxo_refs
            type: object
            properties:
              _utxo_refs:
                format: text
                type: array
                items:
                  type: string
                description: Array of Cardano utxo references in the form "hash#index"
              _extended:
                format: boolean
                type: boolean
                description: Controls whether or not certain optional fields supported by a given endpoint are populated as a part of the call           
            example:
              _utxo_refs:
                - 206f6da5b0b0de45605a95f5ce7e172be9674550f7dde3838c45cbf24bab8b00#0
                - f1592b29b79ae85d753913dd25644c60925a4a0683979faa33832fead4b4bd9c#0
              _extended: false
      description: Array of Cardano UTxO references in the form "hash#index" with extended flag to toggle additional fields
    ogmios:
      content:
        application/json:
          schema:
            required:
              - jsonrpc
              - method
            type: object
            properties:
              jsonrpc:
                format: text
                type: string
                description: Identifier for JSON-RPC 2.0 standard
                example: "2.0"
              method:
                format: text
                type: string
                description: The Ogmios method to be called (see more details [here](#tag--Ogmios)) or browse examples tab
                enum: ["queryNetwork/blockHeight","queryNetwork/genesisConfiguration","queryNetwork/startTime","queryNetwork/tip","queryLedgerState/epoch","queryLedgerState/eraStart","queryLedgerState/eraSummaries","queryLedgerState/liveStakeDistribution","queryLedgerState/protocolParameters","queryLedgerState/proposedProtocolParameters","queryLedgerState/stakePools","submitTransaction","evaluateTransaction"]
                example: "queryNetwork/tip"
              params:
                type: object
                description: Any parameters relevant to the specific method to be called
                nullable: true
          examples:
            blockHeight:
              description: Query the network’s highest block number.
              value: { "jsonrpc": "2.0", "method": "queryNetwork/blockHeight" }
            genesisConfiguration:
              description: Query the genesis configuration of a given era.
              value: { "jsonrpc": "2.0", "method": "queryNetwork/genesisConfiguration", "params": { "era": "shelley" } }
            startTimeTime:
              description: Query the network start time.
              value: { "jsonrpc": "2.0", "method": "queryNetwork/startTime" }
            tip:
              description: Query tip of the Network
              value: { "jsonrpc": "2.0", "method": "queryNetwork/tip" }
            epoch:
              description: Query the current epoch of the ledger.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/epoch" }
            eraStart:
              description: Query information regarding the beginning of the current ledger era.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/eraStart" }
            eraSummaries:
              description: Query era bounds and slot parameters details, required for proper sloting arithmetic.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/eraSummaries" }
            liveStakeDistribution:
              description: Query distribution of the stake across all known stake pools, relative to the total stake in the network.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/liveStakeDistribution" }
            protocolParameters:
              description: Query the current protocol parameters.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/protocolParameters" }
            proposedProtocolParameters:
              description: Query the last update proposal w.r.t. protocol parameters, if any.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/proposedProtocolParameters" }
            StakePools:
              description: Query the list of all stake pool identifiers currently registered and active.
              value: { "jsonrpc": "2.0", "method": "queryLedgerState/stakePools" }
            submitTransaction:
              description: Submit a signed and serialized transaction to the network.
              value: { "jsonrpc": "2.0", "method": "submitTransaction", "params": { "transaction": { "cbor": "<CBOR-serialized signed transaction (base16)>" } } }
            evaluateTransaction:
              description: Evaluate execution units of scripts in a well-formed transaction.
              value: { "jsonrpc": "2.0", "method": "evaluateTransaction", "params": { "transaction": { "cbor": "<CBOR-serialized signed transaction (base16)>" }, "additionalUtxo": [ { ... } ] } }
      description: JSON-RPC 2.0 standard request body
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer Auth token generated via https://koios.rest Profile page. Using this token value allows consumers to use higher limits than public unauthenticated requests.
  schemas:
    tip:
      description: Current tip of the chain
      type: array
      items:
        properties:
          hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          abs_slot:
            $ref: "#/components/schemas/blocks/items/properties/abs_slot"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          block_no:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
    genesis:
      description: Array of genesis parameters used to start each era on chain
      type: array
      items:
        properties:
          networkmagic:
            type: string
            example: 764824073
            description: Unique network identifier for chain
          networkid:
            type: string
            example: Mainnet
            description: Network ID used at various CLI identification to distinguish between Mainnet and other networks
          epochlength:
            type: string
            example: 432000
            description: Number of slots in an epoch
          slotlength:
            type: string
            example: 1
            description: Duration of a single slot (in seconds)
          maxlovelacesupply:
            type: string
            example: 45000000000000000
            description: Maximum smallest units (lovelaces) supply for the blockchain
          systemstart:
            type: number
            description: UNIX timestamp of the first block (genesis) on chain
            example: 1506203091
          activeslotcoeff:
            type: string
            example: 0.05
            description: "Active Slot Co-Efficient (f) - determines the _probability_ of number of slots in epoch that are expected to have blocks (so mainnet, this would be: 432000 * 0.05 = 21600 estimated blocks)"
          slotsperkesperiod:
            type: string
            example: 129600
            description: Number of slots that represent a single KES period (a unit used for validation of KES key evolutions)
          maxkesrevolutions:
            type: string
            example: 62
            description: Number of KES key evolutions that will automatically occur before a KES (hot) key is expired. This parameter is for security of a pool, in case an operator had access to his hot(online) machine compromised
          securityparam:
            type: string
            example: 2160
            description: A unit (k) used to divide epochs to determine stability window (used in security checks like ensuring atleast 1 block was created in 3*k/f period, or to finalize next epoch's nonce at 4*k/f slots before end of epoch)
          updatequorum:
            type: string
            example: 5
            description: Number of BFT members that need to approve (via vote) a Protocol Update Proposal
          alonzogenesis:
            type: string
            example: '{\"lovelacePerUTxOWord\":34482,\"executionPrices\":{\"prSteps\":{\"numerator\":721,\"denominator\":10000000},...'
            description: A JSON dump of Alonzo Genesis
    totals:
      description: Array of supply/reserves/utxo/fees/treasury stats
      type: array
      items:
        properties:
          epoch_no:
            type: number
            description: Epoch number
            example: 294
          circulation:
            type: string
            description: Circulating UTxOs for given epoch (in lovelaces)
            example: 32081169442642320
          treasury:
            type: string
            description: Funds in treasury for given epoch (in lovelaces)
            example: 637024173474141
          reward:
            type: string
            description: Rewards accumulated as of given epoch (in lovelaces)
            example: 506871250479840
          supply:
            type: string
            description: Total Active Supply (sum of treasury funds, rewards, UTxOs, deposits and fees) for given epoch (in lovelaces)
            example: 33228495612391330
          reserves:
            type: string
            description: Total Reserves yet to be unlocked on chain
            example: 11771504387608670
    param_updates:
      description: Array of unique param update proposals submitted on chain
      type: array
      items:
        properties:
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
          epoch_no:
            $ref: "#/components/schemas/epoch_info/items/properties/epoch_no"
          data:
            type: string
            description: JSON encoded data with details about the parameter update
            example: {"decentralisation": 0.9}
    reserve_withdrawals:
      description: Array of withdrawals from reserves/treasury against stake accounts
      type: array
      items:
        properties:
          epoch_no:
            $ref: "#/components/schemas/epoch_info/items/properties/epoch_no"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          block_hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          amount:
            $ref: "#/components/schemas/pool_delegators/items/properties/amount"
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
    pool_list:
      description: Array of pool IDs and tickers
      type: array
      items:
        properties:
          pool_id_bech32:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_bech32"
          pool_id_hex:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_hex"
          active_epoch_no:
            $ref: "#/components/schemas/pool_info/items/properties/active_epoch_no"
          margin:
            $ref: "#/components/schemas/pool_info/items/properties/margin"
          fixed_cost:
            $ref: "#/components/schemas/pool_info/items/properties/fixed_cost"
          pledge:
            $ref: "#/components/schemas/pool_info/items/properties/pledge"
          reward_addr:
            $ref: "#/components/schemas/pool_info/items/properties/reward_addr"
          owners:
            $ref: "#/components/schemas/pool_info/items/properties/owners"
          relays:
            $ref: "#/components/schemas/pool_info/items/properties/relays"
          ticker:
            type:
              - string
              - 'null'
            description: Pool ticker
            example: AHL
          meta_url:
            $ref: "#/components/schemas/pool_info/items/properties/meta_url"
          meta_hash:
            $ref: "#/components/schemas/pool_info/items/properties/meta_hash"
          pool_status:
            $ref: "#/components/schemas/pool_info/items/properties/pool_status"
          retiring_epoch:
            $ref: "#/components/schemas/pool_info/items/properties/retiring_epoch"
    pool_history_info:
      description: Array of pool history information
      type: array
      items:
        type: object
        properties:
          epoch_no:
            type: number
            description: Epoch for which the pool history data is shown
            example: 312
          active_stake:
            type: string
            description: Amount of delegated stake to this pool at the time of epoch snapshot (in lovelaces)
            example: "31235800000"
          active_stake_pct:
            type: number
            description: Active stake for the pool, expressed as a percentage of total active stake on network
            example: 13.512182543475783
          saturation_pct:
            type: number
            description: Saturation percentage of a pool at the time of snapshot (2 decimals)
            example: 45.32
          block_cnt:
            type:
              - number
              - 'null'
            description: Number of blocks pool created in that epoch
            example: 14
          delegator_cnt:
            type: number
            description: Number of delegators to the pool for that epoch snapshot
            example: 1432
          margin:
            type: number
            description: Margin (decimal format)
            example: 0.125
          fixed_cost:
            type: string
            description: Pool fixed cost per epoch (in lovelaces)
            example: "340000000"
          pool_fees:
            type: string
            description: Total amount of fees earned by pool owners in that epoch (in lovelaces)
            example: "123327382"
          deleg_rewards:
            type: string
            description: Total amount of rewards earned by delegators in that epoch (in lovelaces)
            example: "123456789123"
          member_rewards:
            type: string
            description: Total amount of rewards earned by members (delegator - owner) in that epoch (in lovelaces)
            example: "123456780123"
          epoch_ros:
            type: number
            description: Annualized ROS (return on staking) for delegators for this epoch
            example: 3.000340466
    pool_info:
      description: Array of pool information
      type: array
      items:
        type: object
        properties:
          pool_id_bech32:
            type: string
            description: Pool ID (bech32 format)
            example: pool155efqn9xpcf73pphkk88cmlkdwx4ulkg606tne970qswczg3asc
          pool_id_hex:
            type: string
            description: Pool ID (Hex format)
            example: a532904ca60e13e88437b58e7c6ff66b8d5e7ec8d3f4b9e4be7820ec
          active_epoch_no:
            $ref: "#/components/schemas/pool_updates/items/properties/active_epoch_no"
          vrf_key_hash:
            type:
              - string
              - 'null'
            description: Pool VRF key hash
            example: 25efdad1bc12944d38e4e3c26c43565bec84973a812737b163b289e87d0d5ed3
          margin:
            type:
              - number
              - 'null'
            description: Margin (decimal format)
            example: 0.1
          fixed_cost:
            type:
              - string
              - 'null'
            description: Pool fixed cost per epoch
            example: "500000000"
          pledge:
            type:
              - string
              - 'null'
            description: Pool pledge in lovelace
            example: "64000000000000"
          reward_addr:
            type:
              - string
              - 'null'
            description: Pool reward address
            example: stake1uy6yzwsxxc28lfms0qmpxvyz9a7y770rtcqx9y96m42cttqwvp4m5
          owners:
            type:
              - array
              - 'null'
            items:
              type: string
              description: Pool (co)owner address
              example: stake1u8088wvudd7dp3rxl0v9xgng8r3j50s65ge3l3jvgd94keqfm3nv3
          relays:
            type: array
            items:
              type: object
              properties:
                dns:
                  type:
                    - string
                    - 'null'
                  description: DNS name of the relay (nullable)
                  example: relays-new.cardano-mainnet.iohk.io
                srv:
                  type:
                    - string
                    - 'null'
                  description: DNS service name of the relay (nullable)
                  example: biostakingpool3.hopto.org
                ipv4:
                  type:
                    - string
                    - 'null'
                  description: IPv4 address of the relay (nullable)
                  example: "54.220.20.40"
                ipv6:
                  type:
                    - string
                    - 'null'
                  description: IPv6 address of the relay (nullable)
                  example: 2604:ed40:1000:1711:6082:78ff:fe0c:ebf
                port:
                  type:
                    - number
                    - 'null'
                  description: Port number of the relay (nullable)
                  example: 6000
          meta_url:
            type:
              - string
              - 'null'
            description: Pool metadata URL
            example: https://pools.iohk.io/IOGP.json
          meta_hash:
            type:
              - string
              - 'null'
            description: Pool metadata hash
            example: 37eb004c0dd8a221ac3598ca1c6d6257fb5207ae9857b7c163ae0f39259d6cc0
          meta_json:
            type:
              - object
              - 'null'
            properties:
              name:
                type: string
                description: Pool name
                example: Input Output Global (IOHK) - Private
              ticker:
                type: string
                description: Pool ticker
                example: IOGP
              homepage:
                type: string
                description: Pool homepage URL
                example: https://iohk.io
              description:
                type: string
                description: Pool description
                example: Our mission is to provide economic identity to the billions of people who lack it. IOHK will not use the IOHK ticker.
          pool_status:
            type: string
            description: Pool status
            enum: ["registered", "retiring", "retired"]
            example: registered
          retiring_epoch:
            type:
              - number
              - 'null'
            description: Announced retiring epoch (nullable)
            example: 'null'
          op_cert:
            type:
              - string
              - 'null'
            description: Pool latest operational certificate hash
            example: 37eb004c0dd8a221ac3598ca1c6d6257fb5207ae9857b7c163ae0f39259d6cc0
          op_cert_counter:
            type:
              - number
              - 'null'
            description: Pool latest operational certificate counter value
            example: 8
          active_stake:
            type:
              - string
              - 'null'
            description: Pool active stake (will be null post epoch transition until dbsync calculation is complete)
            example: "64328627680963"
          sigma:
            type:
              - number
              - 'null'
            description: Pool relative active stake share
            example: 0.0034839235
          block_count:
            type:
              - number
              - 'null'
            description: Total pool blocks on chain
            example: 4509
          live_pledge:
            type:
              - string
              - 'null'
            description: Summary of account balance for all pool owner's
            example: "64328594406327"
          live_stake:
            type:
              - string
              - 'null'
            description: Pool live stake
            example: "64328627680963"
          live_delegators:
            type: number
            description: Pool live delegator count
            example: 5
          live_saturation:
            type:
              - number
              - 'null'
            description: Pool live saturation (decimal format)
            example: 94.52
    pool_snapshot:
      type: array
      items:
        description: Array of pool stake information for 3 snapshots
        type: object
        properties:
          snapshot:
            type: string
            description: Type of snapshot ("Mark", "Set" or "Go")
            example: "Mark"
          epoch_no:
            type: number
            description: Epoch number for the snapshot entry
            example: 324
          nonce:
            $ref: "#/components/schemas/epoch_params/items/properties/nonce"
          pool_stake:
            type: string
            description: Pool's Active Stake for the given epoch
            example: "100000000000"
          active_stake:
            type: string
            description: Total Active Stake for the given epoch
            example: "103703246364020"
    pool_delegators:
      description: Array of live pool delegators
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          amount:
            type: string
            description: Current delegator live stake (in lovelace)
            example: 64328591517480
          active_epoch_no:
            type: number
            description: Epoch number in which the delegation becomes active
            example: 324
          latest_delegation_tx_hash:
            type: string
            description: Latest transaction hash used for delegation by the account
            example: 368d08fe86804d637649341d3aec4a9baa7dffa6d00f16de2ba9dba814f1c948
    pool_registrations:
      description: Array of pool registrations/retirements
      type: array
      items:
        type: object
        properties:
          pool_id_bech32:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_bech32"
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          block_hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          epoch_no:
            $ref: "#/components/schemas/epoch_info/items/properties/epoch_no"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          active_epoch_no:
            $ref: "#/components/schemas/pool_updates/items/properties/active_epoch_no"
    pool_delegators_history:
      description: Array of pool delegators (historical)
      type:
        - array
        - 'null'
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          amount:
            $ref: "#/components/schemas/pool_delegators/items/properties/amount"
          epoch_no:
            type: number
            description: Epoch number for the delegation history
            example: 324
    pool_blocks:
      description: Array of blocks created by pool
      type: array
      items:
        type: object
        properties:
          epoch_no:
            $ref: "#/components/schemas/epoch_info/items/properties/epoch_no"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          abs_slot:
            $ref: "#/components/schemas/blocks/items/properties/abs_slot"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
    pool_updates:
      description: Array of historical pool updates
      type: array
      items:
        type: object
        properties:
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
          pool_id_bech32:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_bech32"
          pool_id_hex:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_hex"
          active_epoch_no:
            type:
              - number
              - 'null'
            description: Epoch number in which the update becomes active
            example: 324
          vrf_key_hash:
            $ref: "#/components/schemas/pool_info/items/properties/vrf_key_hash"
          margin:
            $ref: "#/components/schemas/pool_info/items/properties/margin"
          fixed_cost:
            $ref: "#/components/schemas/pool_info/items/properties/fixed_cost"
          pledge:
            $ref: "#/components/schemas/pool_info/items/properties/pledge"
          reward_addr:
            $ref: "#/components/schemas/pool_info/items/properties/reward_addr"
          owners:
            $ref: "#/components/schemas/pool_info/items/properties/owners"
          relays:
            $ref: "#/components/schemas/pool_info/items/properties/relays"
          meta_url:
            $ref: "#/components/schemas/pool_info/items/properties/meta_url"
          meta_hash:
            $ref: "#/components/schemas/pool_info/items/properties/meta_hash"
          meta_json:
            $ref: "#/components/schemas/pool_info/items/properties/meta_json"
          update_type:
            type: string
            description: Type of update task
            enum: ["registration", "deregistration"]
            example: registered
          retiring_epoch:
            $ref: "#/components/schemas/pool_info/items/properties/retiring_epoch"
    pool_relays:
      description: Array of pool relay information
      type: array
      items:
        type: object
        properties:
          pool_id_bech32:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_bech32"
          relays:
            $ref: "#/components/schemas/pool_info/items/properties/relays"
          pool_status:
            $ref: "#/components/schemas/pool_info/items/properties/pool_status"
    pool_metadata:
      description: Array of pool metadata
      type: array
      items:
        type: object
        properties:
          pool_id_bech32:
            $ref: "#/components/schemas/pool_info/items/properties/pool_id_bech32"
          meta_url:
            $ref: "#/components/schemas/pool_info/items/properties/meta_url"
          meta_hash:
            $ref: "#/components/schemas/pool_info/items/properties/meta_hash"
          meta_json:
            $ref: "#/components/schemas/pool_info/items/properties/meta_json"
          pool_status:
            $ref: "#/components/schemas/pool_info/items/properties/pool_status"
    epoch_info:
      description: Array of detailed summary for each epoch
      type: array
      items:
        type: object
        properties:
          epoch_no:
            type: number
            description: Epoch number
            example: 294
          out_sum:
            type: string
            description: Total output value across all transactions in epoch
            example: 15432725054364942
          fees:
            type: string
            description: Total fees incurred by transactions in epoch
            example: 74325855210
          tx_count:
            type: number
            description: Number of transactions submitted in epoch
            example: 357919
          blk_count:
            type: number
            description: Number of blocks created in epoch
            example: 17321
          start_time:
            type: number
            description: UNIX timestamp of the epoch start
            example: 1506203091
          end_time:
            type: number
            description: UNIX timestamp of the epoch end
            example: 1506635091
          first_block_time:
            type: number
            description: UNIX timestamp of the epoch's first block
            example: 1506635091
          last_block_time:
            type: number
            description: UNIX timestamp of the epoch's last block
            example: 1506635091
          active_stake:
            type:
              - string
              - 'null'
            description: Total active stake in epoch stake snapshot (null for pre-Shelley epochs)
            example: 23395112387185880
          total_rewards:
            type:
              - string
              - 'null'
            description: Total rewards earned in epoch (null for pre-Shelley epochs)
            example: 252902897534230
          avg_blk_reward:
            type:
              - string
              - 'null'
            description: Average block reward for epoch (null for pre-Shelley epochs)
            example: 660233450
    epoch_params:
      description: Epoch parameters (all fields nullable for pre-Shelley/Gougen epochs except first block hash)
      type: array
      items:
        properties:
          epoch_no:
            type: number
            description: Epoch number
            example: 294
          min_fee_a:
            type:
              - number
              - 'null'
            description: The 'a' parameter to calculate the minimum transaction fee
            example: 44
          min_fee_b:
            type:
              - number
              - 'null'
            description: The 'b' parameter to calculate the minimum transaction fee
            example: 155381
          max_block_size:
            type:
              - number
              - 'null'
            description: The maximum block size (in bytes)
            example: 65536
          max_tx_size:
            type:
              - number
              - 'null'
            description: The maximum transaction size (in bytes)
            example: 16384
          max_bh_size:
            type:
              - number
              - 'null'
            description: The maximum block header size (in bytes)
            example: 1100
          key_deposit:
            type:
              - string
              - 'null'
            description: The amount (in lovelace) required for a deposit to register a stake address
            example: 2000000
          pool_deposit:
            type:
              - string
              - 'null'
            description: The amount (in lovelace) required for a deposit to register a stake pool
            example: 500000000
          max_epoch:
            type:
              - number
              - 'null'
            description: The maximum number of epochs in the future that a pool retirement is allowed to be scheduled for
            example: 18
          optimal_pool_count:
            type:
              - number
              - 'null'
            description: The optimal number of stake pools
            example: 500
          influence:
            type:
              - number
              - 'null'
            format: double
            description: The pledge influence on pool rewards
            example: 0.3
          monetary_expand_rate:
            type:
              - number
              - 'null'
            format: double
            description: The monetary expansion rate
            example: 0.003
          treasury_growth_rate:
            type:
              - number
              - 'null'
            format: double
            description: The treasury growth rate
            example: 0.2
          decentralisation:
            type:
              - number
              - 'null'
            format: double
            description: The decentralisation parameter (1 fully centralised, 0 fully decentralised)
            example: 0.1
          extra_entropy:
            type:
              - string
              - 'null'
            description: The hash of 32-byte string of extra random-ness added into the protocol's entropy pool
            example: d982e06fd33e7440b43cefad529b7ecafbaa255e38178ad4189a37e4ce9bf1fa
          protocol_major:
            type:
              - number
              - 'null'
            description: The protocol major version
            example: 5
          protocol_minor:
            type:
              - number
              - 'null'
            description: The protocol minor version
            example: 0
          min_utxo_value:
            type:
              - string
              - 'null'
            description: The minimum value of a UTxO entry
            example: 34482
          min_pool_cost:
            type:
              - string
              - 'null'
            description: The minimum pool cost
            example: 340000000
          nonce:
            type:
              - string
              - 'null'
            description: The nonce value for this epoch
            example: 01304ddf5613166be96fce27be110747f2c8fcb38776618ee79225ccb59b81e2
          block_hash:
            type: string
            description: The hash of the first block where these parameters are valid
            example: f9dc2a2fc3a2db09a71af007a740261de585afc9e3022b8e30535592ff4dd9e5
          cost_models:
            type:
              - object
              - 'null'
            description: The per language cost model in JSON
            example: 'null'
          price_mem:
            type:
              - number
              - 'null'
            format: double
            description: The per word cost of script memory usage
            example: 0.0577
          price_step:
            type:
              - number
              - 'null'
            format: double
            description: The cost of script execution step usage
            example: 7.21e-05
          max_tx_ex_mem:
            type:
              - number
              - 'null'
            description: The maximum number of execution memory allowed to be used in a single transaction
            example: 10000000
          max_tx_ex_steps:
            type:
              - number
              - 'null'
            description: The maximum number of execution steps allowed to be used in a single transaction
            example: 10000000000
          max_block_ex_mem:
            type:
              - number
              - 'null'
            description: The maximum number of execution memory allowed to be used in a single block
            example: 50000000
          max_block_ex_steps:
            type:
              - number
              - 'null'
            description: The maximum number of execution steps allowed to be used in a single block
            example: 40000000000
          max_val_size:
            type:
              - number
              - 'null'
            description: The maximum Val size
            example: 5000
          collateral_percent:
            type:
              - number
              - 'null'
            description: The percentage of the tx fee which must be provided as collateral when including non-native scripts
            example: 150
          max_collateral_inputs:
            type:
              - number
              - 'null'
            description: The maximum number of collateral inputs allowed in a transaction
            example: 3
          coins_per_utxo_size:
            type:
              - string
              - 'null'
            description: The cost per UTxO size
            example: 34482
    epoch_block_protocols:
      description: Array of distinct block protocol versions counts in epoch
      type: array
      items:
        properties:
          proto_major:
            type: number
            description: Protocol major version
            example: 6
          proto_minor:
            type: number
            description: Protocol major version
            example: 2
          blocks:
            type: number
            description: Amount of blocks with specified major and protocol combination
            example: 2183
    blocks:
      description: Array of block information
      type: array
      items:
        type: object
        properties:
          hash:
            type: string
            description: Hash of the block
            example: 2fa5178c5be950c7f40d6c74efe9b3dd12c4836dc3f3dd052cd1c2a12edd477f
          epoch_no:
            type: number
            description: Epoch number of the block
            example: 117
          abs_slot:
            type: number
            description: Absolute slot number of the block
            example: 49073930
          epoch_slot:
            type: number
            description: Slot number of the block in epoch
            example: 171530
          block_height:
            type:
              - number
              - 'null'
            description: Block height
            example: 1794506
          block_size:
            type: number
            description: Block size in bytes
            example: 2433
          block_time:
            type: number
            description: UNIX timestamp of the block
            example: 1704757130
          tx_count:
            type: number
            description: Number of transactions in the block
            example: 2
          vrf_key:
            type: string
            description: VRF key of the block producer
            example: "vrf_vk1400ju08429se790upcvurdyqrhl8rhm7spm2jxg0lfnedqeaexfq7jsf2x"
          pool:
            type:
              - string
              - 'null'
            description: Pool ID in bech32 format (null for pre-Shelley blocks)
            example: pool13m26ky08vz205232k20u8ft5nrg8u68klhn0xfsk9m4gsqsc44v
          op_cert_counter:
            type: number
            description: Counter value of the operational certificate used to create this block
            example: 5
          proto_major:
            $ref: "#/components/schemas/epoch_params/items/properties/protocol_major"
          proto_minor:
            $ref: "#/components/schemas/epoch_params/items/properties/protocol_minor"
          parent_hash:
            type: string
            description: Previous Hash of the current block
            example: 7eb8d62f9d6a5e7cf2d9635f0b531d2693fef55a717894e3a97baf6183b8d189
    block_info:
      description: Array of detailed block information
      type: array
      items:
        type: object
        properties:
          hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          abs_slot:
            $ref: "#/components/schemas/blocks/items/properties/abs_slot"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_size:
            $ref: "#/components/schemas/blocks/items/properties/block_size"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
          tx_count:
            $ref: "#/components/schemas/blocks/items/properties/tx_count"
          vrf_key:
            $ref: "#/components/schemas/blocks/items/properties/vrf_key"
          op_cert:
            type: string
            description: Hash of the block producers' operational certificate
            example: "16bfc28a7127d11805fe02df67f8c3909ab7e2e2cd81b6954d90eeff1938614c"
          op_cert_counter:
            $ref: "#/components/schemas/blocks/items/properties/op_cert_counter"
          pool:
            $ref: "#/components/schemas/blocks/items/properties/pool"
          proto_major:
            $ref: "#/components/schemas/epoch_params/items/properties/protocol_major"
          proto_minor:
            $ref: "#/components/schemas/epoch_params/items/properties/protocol_minor"
          total_output:
            type:
              - string
              - 'null'
            description: Total output of the block (in lovelace)
            example: 92384672389
          total_fees:
            type:
              - string
              - 'null'
            description: Total fees of the block (in lovelace)
            example: 2346834
          num_confirmations:
            type: number
            description: Number of confirmations for the block
            example: 664275
          parent_hash:
            type: string
            description: Hash of the parent of this block
            example: "16bfc28a7127d11805fe02df67f8c3909ab7e2e2cd81b6954d90eeff1938614c"
          child_hash:
            type: string
            description: Hash of the child of this block (if present)
            example: "a3b525ba0747ce9daa928fa28fbc680f95e6927943a1fbd6fa5394d96c9dc2fa"
    block_txs:
      description: Array of transactions hashes
      type: array
      items:
        type: object
        properties:
          block_hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
    block_tx_info:
      description: Array of detailed information about transaction(s)
      type: array
      items:
        type: object
        properties:
          tx_hash:
            $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
          block_hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          absolute_slot:
            $ref: "#/components/schemas/blocks/items/properties/abs_slot"
          tx_timestamp:
            $ref: "#/components/schemas/tx_info/items/properties/tx_timestamp"
          tx_block_index:
            $ref: "#/components/schemas/tx_info/items/properties/tx_block_index"
          tx_size:
            $ref: "#/components/schemas/tx_info/items/properties/tx_size"
          total_output:
            $ref: "#/components/schemas/tx_info/items/properties/total_output"
          fee:
            $ref: "#/components/schemas/tx_info/items/properties/fee"
          deposit:
            $ref: "#/components/schemas/tx_info/items/properties/deposit"
          invalid_before:
            $ref: "#/components/schemas/tx_info/items/properties/invalid_before"
          invalid_after:
            $ref: "#/components/schemas/tx_info/items/properties/invalid_after"
          collateral_inputs:
            $ref: "#/components/schemas/tx_info/items/properties/collateral_inputs"
          collateral_output:
            $ref: "#/components/schemas/tx_info/items/properties/collateral_output"
          reference_inputs:
            $ref: "#/components/schemas/tx_info/items/properties/reference_inputs"
          inputs:
            description: An array of UTxO inputs spent in the transaction
            anyOf:
            - type: 'null'
            - $ref: "#/components/schemas/tx_info/items/properties/outputs"
          outputs:
            $ref: "#/components/schemas/tx_info/items/properties/outputs"
          withdrawals:
            $ref: "#/components/schemas/tx_info/items/properties/withdrawals"
          assets_minted:
            $ref: "#/components/schemas/tx_info/items/properties/assets_minted"
          metadata:
            $ref: "#/components/schemas/tx_metadata/items/properties/metadata"
          certificates:
            $ref: "#/components/schemas/tx_info/items/properties/certificates"
          native_scripts:
            $ref: "#/components/schemas/tx_info/items/properties/native_scripts"
          plutus_contracts:
            $ref: "#/components/schemas/tx_info/items/properties/plutus_contracts"
    address_info:
      description: Array of information for address(es)
      type: array
      items:
        type: object
        properties:
          address:
            $ref: "#/components/schemas/utxo_infos/items/properties/address"
          balance:
            type: string
            description: Sum of all UTxO values beloning to address
            example: 10723473983
          stake_address:
            anyOf:
            - type: 'null'
            - $ref: "#/components/schemas/account_history/items/properties/stake_address"
          script_address:
            type: boolean
            description: Signifies whether the address is a script address
            example: true
          utxo_set:
            type: array
            items:
              type: object
              properties:
                tx_hash:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
                tx_index:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_index"
                block_height:
                  $ref: "#/components/schemas/blocks/items/properties/block_height"
                block_time:
                  $ref: "#/components/schemas/blocks/items/properties/block_time"
                value:
                  $ref: "#/components/schemas/tx_info/items/properties/outputs/items/properties/value"
                datum_hash:
                  $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_hash"
                inline_datum:
                  $ref: "#/components/schemas/tx_info/items/properties/outputs/items/properties/inline_datum"
                reference_script:
                  $ref: "#/components/schemas/tx_info/items/properties/outputs/items/properties/reference_script"
                asset_list:
                  $ref: "#/components/schemas/utxo_infos/items/properties/asset_list"
    address_txs:
      description: Array of transaction hashes
      type: array
      items:
        type: object
        properties:
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
    address_assets:
      description: Array of address-owned assets
      type: array
      items:
        type: object
        properties:
          address:
            $ref: "#/components/schemas/utxo_infos/items/properties/address"
          policy_id:
            $ref: "#/components/schemas/asset_info/items/properties/policy_id"
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
          decimals:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/decimals"
          quantity:
            $ref: "#/components/schemas/asset_addresses/items/properties/quantity"

    account_list:
      description: Array of account (stake address) IDs
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          stake_address_hex:
            type: string
            description: Cardano staking address (reward account) in hex format
            example: e1c865f10d66a2e375242b5ef9f05abc8840d413421982f62c35ce4fbf
          script_hash:
            type: string
            description: Script hash in case the stake address is locked by a script
            example: bf357f5de69e4aad71954bebd64357a4813ea5233df12fce4a9de582

    account_info:
      description: Array of stake account information
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          status:
            type: string
            description: Stake address status
            enum: ["registered", "not registered"]
            example: registered
          delegated_pool:
            anyOf:
            - type: 'null'
            - $ref: "#/components/schemas/pool_list/items/properties/pool_id_bech32"
          total_balance:
            type: string
            description: Total balance of the account including UTxO, rewards and MIRs (in lovelace)
            example: 207116800428
          utxo:
            type: string
            description: Total UTxO balance of the account
            example: 162764177131
          rewards:
            type: string
            description: Total rewards earned by the account
            example: 56457728047
          withdrawals:
            type: string
            description: Total rewards withdrawn by the account
            example: 12105104750
          rewards_available:
            type: string
            description: Total rewards available for withdawal
            example: 44352623297
          reserves:
            type: string
            description: Total reserves MIR value of the account
            example: "0"
          treasury:
            type: string
            description: Total treasury MIR value of the account
            example: "0"
    utxo_infos:
      description: Array of complete UTxO information
      type: array
      items:
        type: object
        properties:
          tx_hash:
            type: string
            description: Hash identifier of the transaction
            example: f144a8264acf4bdfe2e1241170969c930d64ab6b0996a4a45237b623f1dd670e
          tx_index:
            type: number
            description: Index of UTxO in the transaction 
            example: 0
          address:
            type: string
            description: A Cardano payment/base address (bech32 encoded)
            example: addr1qxkfe8s6m8qt5436lec3f0320hrmpppwqgs2gah4360krvyssntpwjcz303mx3h4avg7p29l3zd8u3jyglmewds9ezrqdc3cxp
          value:
            $ref: "#/components/schemas/tx_info/items/properties/outputs/items/properties/value"
          stake_address:
            $ref: "#/components/schemas/address_info/items/properties/stake_address"
          payment_cred:
            type:
              - string
              - 'null'
            description: Payment credential
            example: de3c1c527e8826b9cd2030f88f75fc44cd4ce519b9ded9eb794b3794
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          block_time:
            $ref: "#/components/schemas/blocks/items/properties/block_time"
          datum_hash:
            $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_hash"
          inline_datum:
            $ref: "#/components/schemas/tx_info/items/properties/outputs/items/properties/inline_datum"
          reference_script:
            $ref: "#/components/schemas/tx_info/items/properties/outputs/items/properties/reference_script"
          asset_list:
            type:
              - array
              - 'null'
            description: An array of assets on the UTxO
            items:
              properties:
                policy_id:
                  $ref: "#/components/schemas/asset_info/items/properties/policy_id"
                asset_name:
                  $ref: "#/components/schemas/asset_info/items/properties/asset_name"
                fingerprint:
                  $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
                decimals:
                  $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/decimals"
                quantity:
                  type: string
                  description: Quantity of assets on the UTxO
                  example: 1
          is_spent:
            type: boolean
            description: True if the UTXO has been spent
            example: true
    account_rewards:
      description: Array of reward history information
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          rewards:
            type: array
            items:
              type: object
              properties:
                earned_epoch:
                  $ref: "#/components/schemas/epoch_info/items/properties/epoch_no"
                spendable_epoch:
                  $ref: "#/components/schemas/epoch_info/items/properties/epoch_no"
                amount:
                  type: string
                  description: Amount of rewards earned (in lovelace)
                type:
                  type: string
                  description: The source of the rewards
                  enum: [member, leader, treasury, reserves]
                  example: member
                pool_id:
                  $ref: "#/components/schemas/pool_list/items/properties/pool_id_bech32"
    account_updates:
      description: Array of account updates information
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          updates:
            type: array
            items:
              type: object
              properties:
                action_type:
                  type: string
                  description: Type of certificate submitted
                  enum: ["registration", "delegation", "withdrawal", "deregistration"]
                  example: "registration"
                tx_hash:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
                epoch_no:
                  $ref: "#/components/schemas/blocks/items/properties/epoch_no"
                epoch_slot:
                  $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
                absolute_slot:
                  $ref: "#/components/schemas/blocks/items/properties/abs_slot"
                block_time:
                  $ref: "#/components/schemas/blocks/items/properties/block_time"
    account_addresses:
      description: Array of payment addresses
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          addresses:
            type: array
            items:
              $ref: "#/components/schemas/utxo_infos/items/properties/address"
    account_assets:
      description: Array of assets owned by account
      type: array
      items:
        type: object
        properties:
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          policy_id:
            $ref: "#/components/schemas/asset_info/items/properties/policy_id"
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
          decimals:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/decimals"
          quantity:
            $ref: "#/components/schemas/asset_addresses/items/properties/quantity"
    account_history:
      description: Array of active stake values per epoch
      type: array
      items:
        properties:
          stake_address:
            type: string
            description: Cardano staking address (reward account) in bech32 format
            example: stake1u8yxtugdv63wxafy9d00nuz6hjyyp4qnggvc9a3vxh8yl0ckml2uz
          history:
            type: array
            items:
              type: object
              properties:
                pool_id:
                  type: string
                  description: Bech32 representation of pool ID
                  example: pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt
                epoch_no:
                  type: number
                  description: Epoch number
                  example: 301
                active_stake:
                  type: string
                  description: Active stake amount (in lovelaces)
                  example: 682334162
    tx_info:
      description: Array of detailed information about transaction(s)
      type: array
      items:
        type: object
        properties:
          tx_hash:
            $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
          block_hash:
            $ref: "#/components/schemas/blocks/items/properties/hash"
          block_height:
            $ref: "#/components/schemas/blocks/items/properties/block_height"
          epoch_no:
            $ref: "#/components/schemas/blocks/items/properties/epoch_no"
          epoch_slot:
            $ref: "#/components/schemas/blocks/items/properties/epoch_slot"
          absolute_slot:
            $ref: "#/components/schemas/blocks/items/properties/abs_slot"
          tx_timestamp:
            type: number
            description: UNIX timestamp of the transaction
            example: 1506635091
          tx_block_index:
            type: number
            description: Index of transaction within block
            example: 6
          tx_size:
            type: number
            description: Size in bytes of transaction
            example: 391
          total_output:
            type: string
            description: Total sum of all transaction outputs (in lovelaces)
            example: 157832856
          fee:
            type: string
            description: Total Transaction fee (in lovelaces)
            example: 172761
          deposit:
            type: string
            description: Total Deposits included in transaction (for example, if it is registering a pool/key)
            example: 0
          invalid_before:
            type:
              - string
              - 'null'
            description: Slot before which transaction cannot be validated (if supplied, else null)
          invalid_after:
            type:
              - string
              - 'null'
            description: Slot after which transaction cannot be validated
            example: 42332172
          collateral_inputs:
            description: An array of collateral inputs needed for smart contracts in case of contract failure
            anyOf:
            - type: 'null'
            - $ref: "#/components/schemas/tx_info/items/properties/outputs"
          collateral_output:
            description: A collateral output for change if the smart contract fails to execute and collateral inputs are spent. (CIP-40)
            anyOf:
            - type: 'null'
            - $ref: "#/components/schemas/tx_info/items/properties/outputs/items"
          reference_inputs:
            description: An array of reference inputs. A reference input allows looking at an output without spending it. (CIP-31)
            anyOf:
            - type: 'null'
            - $ref: "#/components/schemas/tx_info/items/properties/outputs"
          inputs:
            $ref: "#/components/schemas/tx_info/items/properties/outputs"
            #description: An array of UTxO inputs spent in the transaction
          outputs:
            type: array
            description: An array of UTxO outputs created by the transaction
            items:
              type: object
              properties:
                payment_addr:
                  type: object
                  properties:
                    bech32:
                      $ref: "#/components/schemas/utxo_infos/items/properties/address"
                    cred:
                      type: string
                      description: Payment credential
                      example: de3c1c527e8826b9cd2030f88f75fc44cd4ce519b9ded9eb794b3794
                stake_addr:
                  $ref: "#/components/schemas/address_info/items/properties/stake_address"
                tx_hash:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
                tx_index:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_index"
                value:
                  type: string
                  description: Total sum of ADA on the UTxO
                  example: 157832856
                datum_hash:
                  type:
                    - string
                    - 'null'
                  description: Hash of datum (if any) connected to UTxO 
                  example: 30c16dd243324cf9d90ffcf211b9e0f2117a7dc28d17e85927dfe2af3328e5c9
                inline_datum:
                  type:
                    - object
                    - 'null'
                  description: Allows datums to be attached to UTxO (CIP-32)
                  properties:
                    bytes:
                      type: string
                      description: Datum bytes (hex)
                      example: 19029a
                    value:
                      type: object
                      description: Value (json)
                      example: { "int": 666 }
                reference_script:
                  type:
                    - object
                    - 'null'
                  description: Allow reference scripts to be used to satisfy script requirements during validation, rather than requiring the spending transaction to do so. (CIP-33)
                  properties:
                    hash:
                      type: string
                      description: Hash of referenced script
                      example: 67f33146617a5e61936081db3b2117cbf59bd2123748f58ac9678656
                    size:
                      type: number
                      description: Size in bytes
                      example: 14
                    type:
                      type: string
                      description: Type of script
                      example: plutusV1
                    bytes:
                      type: string
                      description: Script bytes (hex)
                      example: 4e4d01000033222220051200120011
                    value:
                      type:
                        - object
                        - 'null'
                      description: Value (json)
                      example: 'null'
                asset_list:
                  $ref: "#/components/schemas/utxo_infos/items/properties/asset_list"
          withdrawals:
            type:
              - array
              - 'null'
            description: Array of withdrawals with-in a transaction
            items:
              type: object
              properties:
                amount:
                  type: string
                  description: Withdrawal amount (in lovelaces)
                  example: 9845162
                stake_addr:
                  type: string
                  description: A Cardano staking address (reward account, bech32 encoded)
                  example: stake1uxggf4shfvpghcangm67ky0q4zlc3xn7gezy0auhxczu3pslm9wrj
          assets_minted:
            type:
              - array
              - 'null'
            description: Array of minted assets with-in a transaction
            items:
              properties:
                policy_id:
                  $ref: "#/components/schemas/asset_info/items/properties/policy_id"
                asset_name:
                  $ref: "#/components/schemas/asset_info/items/properties/asset_name"
                fingerprint:
                  $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
                decimals:
                  $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/decimals"
                quantity:
                  type: string
                  description: Quantity of minted assets (negative on burn)
                  example: 1
          metadata:
            $ref: "#/components/schemas/tx_metadata/items/properties/metadata"
          certificates:
            type:
              - array
              - 'null'
            description: Certificates present with-in a transaction (if any)
            items:
              properties:
                index:
                  type:
                    - number
                    - 'null'
                  description: Certificate index
                  example: 0
                type:
                  type: string
                  description: Type of certificate (could be delegation, stake_registration, stake_deregistraion, pool_update, pool_retire, param_proposal, reserve_MIR, treasury_MIR)
                  example: delegation
                info:
                  type:
                    - object
                    - 'null'
                  description: A JSON array containing information from the certificate
                  example:
                    {
                      "stake_address": "stake1uxggf4shfvpghcangm67ky0q4zlc3xn7gezy0auhxczu3pslm9wrj",
                      "pool": "pool1k53pf4wzn263c08e3wr3gttndfecm9f4uzekgctcx947vt7fh2p",
                    }
          native_scripts:
            type:
              - array
              - 'null'
            description: Native scripts present in a transaction (if any)
            items:
              properties:
                script_hash:
                  $ref: "#/components/schemas/script_info/items/properties/script_hash"
                script_json:
                  type: object
                  description: JSON representation of the timelock script (null for other script types)
                  example:
                    {
                      "type": "all",
                      "scripts":
                        [
                          {
                            "type": "sig",
                            "keyHash": "a96da581c39549aeda81f539ac3940ac0cb53657e774ca7e68f15ed9",
                          },
                          {
                            "type": "sig",
                            "keyHash": "ccfcb3fed004562be1354c837a4a4b9f4b1c2b6705229efeedd12d4d",
                          },
                          {
                            "type": "sig",
                            "keyHash": "74fcd61aecebe36aa6b6cd4314027282fa4b41c3ce8af17d9b77d0d1",
                          },
                        ],
                    }
          plutus_contracts:
            type:
              - array
              - 'null'
            description: Plutus contracts present in transaction (if any)
            items:
              properties:
                address:
                  type:
                    - string
                    - 'null'
                  description: Plutus script address
                  example: addr1w999n67e86jn6xal07pzxtrmqynspgx0fwmcmpua4wc6yzsxpljz3
                script_hash:
                  $ref: "#/components/schemas/script_info/items/properties/script_hash"
                bytecode:
                  $ref: "#/components/schemas/script_info/items/properties/bytes"
                size:
                  $ref: "#/components/schemas/script_info/items/properties/size"
                valid_contract:
                  type: boolean
                  description: True if the contract is valid or there is no contract
                  example: true
                input:
                  type: object
                  properties:
                    redeemer:
                      type: object
                      properties:
                        purpose:
                          $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/purpose"
                        fee:
                          $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/fee"
                        unit:
                          type: object
                          properties:
                            steps:
                              $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/unit_steps"
                            mem:
                              $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/unit_mem"
                        datum:
                          type: object
                          properties:
                            hash:
                              $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_hash"
                            value:
                              $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_value"
                    datum:
                      type: object
                      properties:
                        hash:
                          $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_hash"
                        value:
                          $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_value"
    tx_utxos:
      description: Array of inputs and outputs for given transaction(s)
      type: array
      items:
        properties:
          tx_hash:
            $ref: "#/components/schemas/tx_info/items/properties/tx_hash"
          inputs:
            type: array
            description: An array of UTxO inputs used by the transaction
            items:
              type: object
              properties:
                payment_addr:
                  type: object
                  properties:
                    bech32:
                      type: string
                      description: A Cardano payment/base address (bech32 encoded) where funds were sent or change to be returned
                      example: addr1q80rc8zj06yzdwwdyqc03rm4l3zv6n89rxuaak0t099n09yssntpwjcz303mx3h4avg7p29l3zd8u3jyglmewds9ezrqad9mkw
                    cred:
                      type: string
                      description: Payment credential
                      example: de3c1c527e8826b9cd2030f88f75fc44cd4ce519b9ded9eb794b3794
                stake_addr:
                  $ref: "#/components/schemas/address_info/items/properties/stake_address"
                tx_hash:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
                tx_index:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_index"
                value:
                  type: string
                  description: Total sum of ADA on the UTxO
                  example: 157832856
          outputs:
            description: An array of UTxO outputs created by the transaction
            allOf:
              - $ref: "#/components/schemas/tx_utxos/items/properties/inputs"
    tx_metadata:
      description: Array of metadata information present in each of the transactions queried
      type:
        - array
        - 'null'
      items:
        properties:
          tx_hash:
            $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
          metadata:
            type:
              - object
              - 'null'
            description: A JSON array containing details about metadata within transaction
            example:
              {
                "721":
                  {
                    "version": 1,
                    "copyright": "...",
                    "publisher": ["p...o"],
                    "4bf184e01e0f163296ab253edd60774e2d34367d0e7b6cbc689b567d":
                      {},
                  },
              }
    tx_status:
      description: Array of transaction confirmation counts
      type: array
      items:
        properties:
          tx_hash:
            $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
          num_confirmations:
            type:
              - number
              - 'null'
            description: Number of block confirmations
            example: 17
    tx_metalabels:
      description: Array of known metadata labels
      type: array
      items:
        properties:
          key:
            type: string
            description: A distinct known metalabel
            example: "721"
    asset_list:
      description: Array of policy IDs and asset names
      type: array
      items:
        type: object
        properties:
          policy_id:
            $ref: "#/components/schemas/asset_info/items/properties/policy_id"
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          asset_name_ascii:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name_ascii"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
    asset_token_registry:
      description: An array of token registry information (registered via github) for each asset
      type: array
      items:
        type: object
        properties:
          policy_id:
            $ref: "#/components/schemas/asset_info/items/properties/policy_id"
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          asset_name_ascii:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name_ascii"
          ticker:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/ticker"
          description:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/description"
          url:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/url"
          decimals:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/decimals"
          logo:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/logo"
    asset_addresses:
      description: An array of payment addresses holding the given token (including balances)
      type: array
      items:
        properties:
          payment_address:
            $ref: "#/components/schemas/utxo_infos/items/properties/address"
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          quantity:
            type: string
            description: Asset balance on the payment address
            example: 23
    asset_nft_address:
      description: An array of payment addresses holding the given token
      type: array
      items:
        properties:
          payment_address:
            $ref: "#/components/schemas/utxo_infos/items/properties/address"
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
    asset_summary:
      description: Array of asset summary information
      type: array
      items:
        properties:
          policy_id:
            $ref: "#/components/schemas/asset_info/items/properties/policy_id"
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
          total_transactions:
            type: number
            description: Total number of transactions including the given asset
            example: 89416
          staked_wallets:
            type: number
            description: Total number of registered wallets holding the given asset
            example: 548
          unstaked_addresses:
            type: number
            description: Total number of payment addresses (not belonging to registered wallets) holding the given asset
            example: 245
          addresses:
            type: number
            description: Total number of unique addresses holding the given asset
            example: 812
    asset_info:
      description: Array of detailed asset information
      type: array
      items:
        properties:
          policy_id:
            type: string
            description: Asset Policy ID (hex)
            example: d3501d9531fcc25e3ca4b6429318c2cc374dbdbcf5e99c1c1e5da1ff
          asset_name:
            type:
              - string
              - 'null'
            description: Asset Name (hex)
            example: 444f4e545350414d
          asset_name_ascii:
            type: string
            description: Asset Name (ASCII)
            example: DONTSPAM
          fingerprint:
            type: string
            description: The CIP14 fingerprint of the asset
            example: asset1ua6pz3yd5mdka946z8jw2fld3f8d0mmxt75gv9
          minting_tx_hash:
            type: string
            description: Hash of the latest mint transaction
            example: cb07b7e51b77079776c4a78f2daf8f14f9945d2b047da7bfcb71d7fbb9f86712
          total_supply:
            type: string
            description: Total supply for the asset
            example: "35000"
          mint_cnt:
            type: number
            description: Count of total mint transactions
            example: 1
          burn_cnt:
            type: number
            description: Count of total burn transactions
            example: 5
          creation_time:
            type: number
            description: UNIX timestamp of the first asset mint
            example: 1506635091
          minting_tx_metadata:
            allOf:
              - $ref: "#/components/schemas/tx_metadata/items/properties/metadata"
            description: Latest minting transaction metadata (aligns with CIP-25)
          token_registry_metadata:
            type:
              - object
              - 'null'
            description: Asset metadata registered on the Cardano Token Registry
            properties:
              name:
                type: string
                example: Rackmob
              description:
                type: string
                example: Metaverse Blockchain Cryptocurrency.
              ticker:
                type: string
                example: MOB
              url:
                type: string
                example: https://www.rackmob.com/
              logo:
                type: string
                description: A PNG image file as a byte string
                example: iVBORw0KGgoAAAANSUhEUgAAAPoAAAD6CAYAAACI7Fo9AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADnmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSfvu78nIGlkPSdXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQnPz4KPHg6eG1wbWV0YSB4bWxuczp4PSdhZG9iZTpuczptZXRhLyc
              decimals:
                type: number
                example: 0
          cip68_metadata:
            type:
              - object
              - 'null'
            description: CIP 68 metadata if present for asset
            example: {"222": {"fields": [{"map": [{"k": {"bytes": "6e616d65"}, "v": {"bytes": "74657374"}}]}], "constructor": 0}}
    asset_history:
      description: Array of asset mint/burn history
      type: array
      items:
        properties:
          policy_id:
            $ref: "#/components/schemas/asset_info/items/properties/policy_id"
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
          minting_txs:
            type:
              - array
              - 'null'
            description: Array of all mint/burn transactions for an asset
            items:
              type: object
              properties:
                tx_hash:
                  type: string
                  description: Hash of minting/burning transaction
                  example: e1ecc517f95715bb87681cfde2c594dbc971739f84f8bfda16170b35d63d0ddf
                block_time:
                  $ref: "#/components/schemas/blocks/items/properties/block_time"
                quantity:
                  type: string
                  description: Quantity minted/burned (negative numbers indicate burn transactions)
                  example: "-10"
                metadata:
                  type: array
                  description: Array of Transaction Metadata for given transaction
                  items:
                    $ref: "#/components/schemas/asset_info/items/properties/minting_tx_metadata"
    policy_asset_addresses:
      description: Array of asset names and payment addresses for the given policy (including balances)
      type: array
      items:
        properties:
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          payment_address:
            $ref: "#/components/schemas/utxo_infos/items/properties/address"
          stake_address:
            $ref: "#/components/schemas/account_history/items/properties/stake_address"
          quantity:
            $ref: "#/components/schemas/asset_addresses/items/properties/quantity"
    policy_asset_info:
      description: Array of detailed information of assets under requested policies
      type: array
      items:
        properties:
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          asset_name_ascii:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name_ascii"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
          minting_tx_hash:
            $ref: "#/components/schemas/asset_info/items/properties/minting_tx_hash"
          total_supply:
            $ref: "#/components/schemas/asset_info/items/properties/total_supply"
          mint_cnt:
            $ref: "#/components/schemas/asset_info/items/properties/mint_cnt"
          burn_cnt:
            $ref: "#/components/schemas/asset_info/items/properties/burn_cnt"
          creation_time:
            $ref: "#/components/schemas/asset_info/items/properties/creation_time"
          minting_tx_metadata:
            $ref: "#/components/schemas/asset_info/items/properties/minting_tx_metadata"
          token_registry_metadata:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata"
    policy_asset_list:
      description: Array of brief information of assets under the same policy
      type: array
      items:
        properties:
          asset_name:
            $ref: "#/components/schemas/asset_info/items/properties/asset_name"
          fingerprint:
            $ref: "#/components/schemas/asset_info/items/properties/fingerprint"
          total_supply:
            $ref: "#/components/schemas/asset_info/items/properties/total_supply"
          decimals:
            $ref: "#/components/schemas/asset_info/items/properties/token_registry_metadata/properties/decimals"
    script_info:
      type: array
      items:
        description: Array of information for scripts
        properties:
          script_hash:
            type: string
            description: Hash of a script
            example: bfa7ffa9b2e164873db6ac6d0528c82e212963bc62e10fd1d81da4af
          creation_tx_hash:
            type: string
            description: Hash of the script creation transaction
            example: 255f061502ad83230351fbcf2d9fade1b5d118d332f92c9861075010a1fe3fbe
          type:
            type: string
            description: Type of the script
            enum: ["plutusV1","plutusV2","timelock","multisig"]
            example: plutusV1
          value:
            type:
              - object
              - 'null'
            description: Data in JSON format
            example: 'null'
          bytes:
            type: string
            description: Script bytes (cborSeq)
            example: 5907f4010000332323232323232323233223232323232332232323232322223232533532533533355300712001323212330012233350052200200200100235001220011233001225335002101710010142325335333573466e3cd400488008d4020880080580544ccd5cd19b873500122001350082200101601510153500122002353500122002222222222200a101413357389201115554784f206e6f7420636f6e73756d6564000133333573466e1cd55cea8012400046644246600200600464646464646464646464646666ae68cdc39aab9d500a480008cccccccccc888888888848cccccccccc00402c02802402001c01801401000c008cd40508c8c8cccd5cd19b8735573aa0049000119910919800801801180f9aba150023019357426ae8940088c98d4cd5ce01581501481409aab9e5001137540026ae854028cd4050054d5d0a804999aa80bbae501635742a010666aa02eeb94058d5d0a80399a80a0109aba15006335014335502402275a6ae854014c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233502575a6ae854008c098d5d09aba2500223263533573805e05c05a05826aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a04aeb4d5d0a80118131aba135744a004464c6a66ae700bc0b80b40b04d55cf280089baa001357426ae8940088c98d4cd5ce01581501481409aab9e5001137540026ae854010cd4051d71aba15003335014335502475c40026ae854008c070d5d09aba2500223263533573804e04c04a04826ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226aae7940044dd50009aba150023232323333573466e1d400520062321222230040053019357426aae79400c8cccd5cd19b875002480108c848888c008014c06cd5d09aab9e500423333573466e1d400d20022321222230010053015357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6a66ae7008808408007c0780740704d55cea80089baa001357426ae8940088c98d4cd5ce00d80d00c80c080c89931a99ab9c4910350543500019018135573ca00226ea8004c8004d5405888448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80b111999aab9f00125009233500830043574200460066ae880080548c8c8c8cccd5cd19b8735573aa00690001199911091998008020018011919191999ab9a3370e6aae7540092000233221233001003002301735742a00466a01c02c6ae84d5d1280111931a99ab9c01b01a019018135573ca00226ea8004d5d0a801999aa803bae500635742a00466a014eb8d5d09aba2500223263533573802e02c02a02826ae8940044d55cf280089baa0011335500175ceb44488c88c008dd5800990009aa80a11191999aab9f0022500823350073355017300635573aa004600a6aae794008c010d5d100180a09aba100111220021221223300100400312232323333573466e1d4005200023212230020033005357426aae79400c8cccd5cd19b8750024800884880048c98d4cd5ce00980900880800789aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98d4cd5ce00800780700689aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6a66ae7003803403002c4dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6a66ae7004404003c0380340304d55cea80089baa0012323333573466e1d40052002200523333573466e1d40092000200523263533573801a01801601401226aae74dd5000891001091000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6a66ae7004c04804404003c03803403002c0284d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263533573801801601401201026aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931a99ab9c009008007006005135573aa00226ea800444888c8c8cccd5cd19b8735573aa0049000119aa80518031aba150023005357426ae8940088c98d4cd5ce00480400380309aab9e5001137540029309000a490350543100112212330010030021123230010012233003300200200133512233002489209366f09fe40eaaeb17d3cb6b0b61e087d664174c39a48a986f86b2b0ba6e2a7b00480008848cc00400c0088005
          size:
            type: number
            description: The size of the CBOR serialised script (in bytes)
            example: 2039
    script_list:
      description: List of script and creation tx hash pairs
      type: array
      items:
        properties:
          script_hash:
            $ref: "#/components/schemas/script_info/items/properties/script_hash"
          creation_tx_hash:
            $ref: "#/components/schemas/script_info/items/properties/creation_tx_hash"
          type:
            $ref: "#/components/schemas/script_info/items/properties/type"
          size:
            $ref: "#/components/schemas/script_info/items/properties/size"
    script_redeemers:
      description: Array of all redeemers for a given script hash
      type: array
      items:
        type: object
        properties:
          script_hash:
            $ref: "#/components/schemas/script_info/items/properties/script_hash"
          redeemers:
            type: array
            items:
              type: object
              properties:
                tx_hash:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_hash"
                tx_index:
                  $ref: "#/components/schemas/utxo_infos/items/properties/tx_index"
                unit_mem:
                  type:
                    - string
                    - number
                    - 'null'
                  description: The budget in Memory to run a script
                  example: 520448
                unit_steps:
                  type:
                    - string
                    - number
                    - 'null'
                  description: The budget in Cpu steps to run a script
                  example: 211535239
                fee:
                  type: string
                  description: The budget in fees to run a script - the fees depend on the ExUnits and the current prices
                  example: 45282
                purpose:
                  type: string
                  description: What kind of validation this redeemer is used for
                  enum: ["spend", "mint", "cert", "reward"]
                  example: spend
                datum_hash:
                  type:
                    - string
                    - 'null'
                  description: The Hash of the Plutus Data
                  example: 5a595ce795815e81d22a1a522cf3987d546dc5bb016de61b002edd63a5413ec4
                datum_value:
                  $ref: "#/components/schemas/script_info/items/properties/value"
    datum_info:
      description: Array of datum information for given datum hashes
      type: array
      items:
        type: object
        properties:
          datum_hash:
            $ref: "#/components/schemas/script_redeemers/items/properties/redeemers/items/properties/datum_hash"
          creation_tx_hash:
            $ref: "#/components/schemas/script_info/items/properties/creation_tx_hash"
          value:
            $ref: "#/components/schemas/script_info/items/properties/value"
          bytes:
            $ref: "#/components/schemas/script_info/items/properties/bytes"
    ogmiostip:
      description: Current tip of the chain, identified by a slot and a block header hash.
      type: object
      properties:
        jsonrpc:
          format: text
          type: string
          description: Identifier for JSON-RPC 2.0 standard
          example: "2.0"
        method:
          format: text
          type: string
          description: The Ogmios method that was called in the request
          example: "queryNetwork/tip"
        result:
          type:
            - object
            - 'null'
            - string
            - array
            - number
          description: Result of the query
          properties:
            slot:
              type: number
              description: Absolute slot number on chain
              example: 59886800
            id:
              type: string
              description: Block Hash (Blake2b 32-byte hash digest, encoded in base16)
              example: "df5678c9774b7bc8c60a4c83b63c3676e618640ad05f7d1ee775b68939cf77d1"
          example: {"slot": 59886800, "id": "df5678c9774b7bc8c60a4c83b63c3676e618640ad05f7d1ee775b68939cf77d1"}
  headers: {}
  responses:
    NotFound:
      description: The server does not recognise the combination of endpoint and parameters provided
    Unauthorized:
      description: Access token is missing or invalid
    BadRequest:
      description: The server cannot process the request due to invalid input
tags:
  - name: Network
    description: Query information about the network
    x-tag-expanded: false
  - name: Epoch
    description: Query epoch-specific details
    x-tag-expanded: false
  - name: Block
    description: Query information about particular block on chain
    x-tag-expanded: false
  - name: Transactions
    description: Query blockchain transaction details
    x-tag-expanded: false
  - name: Stake Account
    description: Query details about specific stake account addresses
    x-tag-expanded: false
  - name: Address
    description: Query information about specific address(es)
    x-tag-expanded: false
  - name: Asset
    description: Query Asset related informations
    x-tag-expanded: false
  - name: Pool
    description: Query information about specific pools
    x-tag-expanded: false
  - name: Script
    description: Query information about specific scripts (Smart Contracts)
    x-tag-expanded: false
  - name: Ogmios
    description: |
      Various stateless queries against Ogmios v6 instance. Please note that ogmios follows JSON-RPC 2.0 method, the example spec on koios.rest is *ONLY* for `queryNetwork/tip`,
      but all the methods listed below are all accepted. Instead of duplicating specs, we would refer you directly to Ogmios documentation [here](https://ogmios.dev/api) for complete specs.

        <br>
        <div style="background-color: #222; padding: 12px 0px 12px 12px;border-left: 5px solid  rgb(173, 44, 44);font-size: var(--font-size-regular);">
        Note that for queries to be stateless across instances on the globe, we cannot acquire local state as successive calls will be across different instances. Additionally, `queryLedgerState/utxo` method is removed to avoid DDoS impacts.
        Thus, we only expose the following methods from monitoring servers, instance providers can expose entire ogmios endpoints if desirable:
        </div>


        ### Network
        - [queryNetwork/blockHeight](https://ogmios.dev/api/#operation-publish-/?QueryNetworkBlockHeight)
        - [queryNetwork/genesisConfiguration](https://ogmios.dev/api/#operation-publish-/?QueryNetworkGenesisConfiguration)
        - [queryNetwork/startTime](https://ogmios.dev/api/#operation-publish-/?QueryNetworkStartTime)
        - [queryNetwork/tip](https://ogmios.dev/api/#operation-publish-/?QueryNetworkTip)
        ### Ledger-State
        - [queryLedgerState/epoch](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateEpoch)
        - [queryLedgerState/eraStart](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateEraStart)
        - [queryLedgerState/eraSummaries](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateEraSummaries)
        - [queryLedgerState/liveStakeDistribution](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateLiveStakeDistribution)
        - [queryLedgerState/protocolParameters](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateProtocolParameters)
        - [queryLedgerState/proposedProtocolParameters](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateProposedProtocolParameters)
        - [queryLedgerState/stakePools](https://ogmios.dev/api/#operation-publish-/?QueryLedgerStateStakePools)
        ### Transactions
        - [submitTransaction](https://ogmios.dev/mini-protocols/local-tx-submission/#submitting-transactions)
        - [evaluateTransaction](https://ogmios.dev/mini-protocols/local-tx-submission/#evaluating-transactions)
    x-tag-expanded: true
security:
  - bearerAuth: []
